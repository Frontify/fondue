import{r as n,j as y}from"./iframe-DFnutv5M.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-B_CiiniT.js";import"./preload-helper-DI9Pv0v-.js";import"./SegmentedControls-DzNAKB44.js";import"./useFocusRing-BZNNB2Hj.js";import"./useEffectEvent-DBbK-aqN.js";import"./useFocusable-C-JPn9OE.js";import"./chain-Dsa_W8ml.js";import"./index-a1h4e75G.js";import"./useFormValidationState-C58z87tk.js";import"./FocusScope-CzNHlT6r.js";import"./useField-DIDYlmQE.js";import"./useLabels-BgJwTBe8.js";import"./context-CMCPGXhG.js";import"./VisuallyHidden-CP5cAKcA.js";import"./useControlledState-CO8iWZC6.js";import"./useMemoizedId-BId1lVLh.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-DWugAyD8.js";import"./TextInput-BmJc5mOX.js";import"./LoadingCircle-DdXCySpe.js";import"./IconCheckMark-DIQLzXWs.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-DSLOUOUE.js";import"./IconExclamationMarkTriangle-Dk_iCro-.js";import"./IconExclamationMarkTriangle24-DXphiQNc.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-gb8qWYaE.js";import"./useLink-B28rYbuM.js";import"./usePopper-mGKvFZOV.js";import"./index-BvzBMR0H.js";import"./Button-DvPoOfB7.js";import"./useButton-B9ck-Vwc.js";import"./Portal-r1TzMWAQ.js";import"./IconExclamationMarkCircle24-Uarnc71I.js";import"./IconMagnifier-C2Kpn50T.js";import"./IconMagnifier16-xDqrbgls.js";import"./index-DQJDGDAH.js";import"./Dropdown-DoUsbxMd.js";import"./useOverlayTriggerState-BU83XqOv.js";import"./useMenuTrigger-NR-AZ6fL.js";import"./useLocalizedStringFormatter-CI2DTdCM.js";import"./helper-CDma-XAN.js";import"./keyboard-B9Pv78ZV.js";import"./SelectionManager-CSpmgRXH.js";import"./MenuItem-CCE2SmwD.js";import"./IconCaretRight-Qf6FLOlU.js";import"./elements-BOYmskOL.js";import"./Trigger-Bc1liQcc.js";import"./IconCaretDown-CntmYteF.js";import"./IconCaretDown16-DXJrcr77.js";import"./IconTrashBin16-m420LrHr.js";import"./IconTrashBin24-DSRZEAzA.js";import"./EnablePortalWrapper-B4vmv_6a.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
