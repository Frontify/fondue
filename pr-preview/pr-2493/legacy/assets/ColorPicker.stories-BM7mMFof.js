import{r as n,j as y}from"./iframe-0YDHrRt6.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-CObsG5xR.js";import"./preload-helper-h55SgzPI.js";import"./SegmentedControls-DxLr5b9C.js";import"./useFocusRing-D4vnbWSH.js";import"./useEffectEvent-B9VOC_Iw.js";import"./useFocusable-D2xehFAO.js";import"./chain-BsYcESRq.js";import"./index-CFitZhhZ.js";import"./useFormValidationState-APvLZgtj.js";import"./FocusScope-BG6t_T-e.js";import"./useField-88l6L0IC.js";import"./useLabels-CqXdtNg-.js";import"./context-wo5efJtD.js";import"./VisuallyHidden-BBiTgaOs.js";import"./useControlledState-KxjXNxhT.js";import"./useMemoizedId-BDmarxCk.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-BwVkMVwD.js";import"./TextInput-Bdj8YO8t.js";import"./LoadingCircle-BjRJPyXu.js";import"./IconCheckMark-DbuNgHzm.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-0SyrPz9-.js";import"./IconExclamationMarkTriangle-B-LVrLFl.js";import"./IconExclamationMarkTriangle24-CfAmBqxS.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-BWZ1XHjf.js";import"./useLink-CxfHgizR.js";import"./usePopper-CsQKkv4s.js";import"./index-DjyKXdH0.js";import"./Button-2G_0paTC.js";import"./useButton-BehVG7Qf.js";import"./Portal-Bx3snlZl.js";import"./IconExclamationMarkCircle24-Dvdhmgm2.js";import"./IconMagnifier-87IjUhyy.js";import"./IconMagnifier16-C4r19bce.js";import"./index-DvYyozLP.js";import"./Dropdown-Dynz93EG.js";import"./useOverlayTriggerState-BsN52IxQ.js";import"./useMenuTrigger-Dcym3XYB.js";import"./useLocalizedStringFormatter-DKsemYem.js";import"./helper-Dt1UMyVx.js";import"./keyboard-yLAtv0oW.js";import"./SelectionManager-DDrPlOw_.js";import"./MenuItem-nrPCXYO4.js";import"./IconCaretRight-BzDrwf5y.js";import"./elements-BOYmskOL.js";import"./Trigger-Be9U765P.js";import"./IconCaretDown-D1jHnc0u.js";import"./IconCaretDown16-BDg74fiZ.js";import"./IconTrashBin16-DM8ocjtE.js";import"./IconTrashBin24-6X4hQTbO.js";import"./EnablePortalWrapper-BLsW0qxC.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
