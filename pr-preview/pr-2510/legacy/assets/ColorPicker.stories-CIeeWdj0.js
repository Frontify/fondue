import{r as n,j as y}from"./iframe-CM-rC4pW.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-wSIOZGa8.js";import"./preload-helper-qBSLZfTS.js";import"./SegmentedControls-B-M6DKQp.js";import"./useFocusRing-65bRAxqP.js";import"./useEffectEvent-CiImHouW.js";import"./useFocusable-DxQGPu8E.js";import"./chain-5aqg5xgJ.js";import"./index-nGC6dqdw.js";import"./useFormValidationState-BHZbvvP7.js";import"./FocusScope--GQhME4v.js";import"./useField-BbtNvWZA.js";import"./useLabels-Bhlb3Fu7.js";import"./context-BEcBWc19.js";import"./VisuallyHidden-Cg67Rdc2.js";import"./useControlledState-DW1Qa8Tl.js";import"./useMemoizedId-do8RxhNb.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-B-RlTRCG.js";import"./TextInput-CEsrv-ON.js";import"./LoadingCircle-Drb61Rof.js";import"./IconCheckMark-65Jmd977.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-n48ME2rd.js";import"./IconExclamationMarkTriangle-BGBvrNZu.js";import"./IconExclamationMarkTriangle24-CdnFfC2B.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-ppPP8AMC.js";import"./useLink-DKND8L_-.js";import"./usePopper-C9oL71dO.js";import"./index-CW6wVUMq.js";import"./Button-CenNVBp8.js";import"./useButton-B0mM1imS.js";import"./Portal-BZmq1DWy.js";import"./IconExclamationMarkCircle24-BL0yj-2z.js";import"./IconMagnifier-BWVC4sb0.js";import"./IconMagnifier16-DvkBm_XM.js";import"./index-COG155PE.js";import"./Dropdown-27pIyo53.js";import"./useOverlayTriggerState-C_hYIL9K.js";import"./useMenuTrigger-DMOrt7NM.js";import"./useLocalizedStringFormatter-DKGXpgf4.js";import"./helper-B30s5uD8.js";import"./keyboard-Dp13NcRP.js";import"./SelectionManager-DcKdtZup.js";import"./MenuItem-CwQEPE2B.js";import"./IconCaretRight-ER1deQrx.js";import"./elements-BOYmskOL.js";import"./Trigger-CRpr7kn-.js";import"./IconCaretDown-maSGby9p.js";import"./IconCaretDown16-BmJK5U7d.js";import"./IconTrashBin16-BqeWSU2Q.js";import"./IconTrashBin24-D801_wi5.js";import"./EnablePortalWrapper-B39I2ECN.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
