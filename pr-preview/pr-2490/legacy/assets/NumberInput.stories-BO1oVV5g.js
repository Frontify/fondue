import{j as o,r as u}from"./iframe-_CJuXu84.js";import{I as _}from"./IconNook16-DpYnD1bi.js";import{V as n}from"./validation-C9S5KgfE.js";import{a as w}from"./Box-Btn5dmVU.js";import{N as i}from"./NumberInput-DGvVhWP7.js";import"./preload-helper-ClJkntjM.js";import"./borderStyle-D9jrV09G.js";import"./merge-DI-veSMP.js";import"./focusStyle-Ch_WJ4aJ.js";import"./input-DuHqVB_O.js";import"./Button-B2N9PeXV.js";import"./useButton-BunVikec.js";import"./useFocusable-DH91yOpf.js";import"./useFocusRing-fCx02c8I.js";import"./useEffectEvent-DuN0fnSL.js";import"./chain-CQyqI67U.js";import"./index-CdDhSHAY.js";import"./IconSize-BcCrF_mi.js";import"./Divider-DbMgtLdb.js";import"./FormControl-zWLLlcHY.js";import"./InputLabel-84cjDhyb.js";import"./TooltipIcon-BAlMvzYR.js";import"./LegacyTooltip-DlM5kaLF.js";import"./useLink-B9611AG5.js";import"./usePopper-DIXRjTn1.js";import"./index-CUOUo0of.js";import"./Portal-DtA00T2z.js";import"./useMemoizedId-CnDE8Hpj.js";import"./IconCheckMark-Comm9FN-.js";import"./IconExclamationMarkCircle24-DzZStVMM.js";import"./IconExclamationMarkTriangle-L3kp_5MP.js";import"./IconExclamationMarkTriangle24-Bal_ANY7.js";import"./IconQuestionMarkCircle-B_fN6JdD.js";import"./LoadingCircle-B2ymvYHm.js";import"./Switch-DCta7Wdg.js";import"./TabItem-B2mMHkxH.js";import"./elements-BOYmskOL.js";import"./TextInput-BNCNYxRp.js";import"./IconCross-DkPhWRI6.js";import"./Tooltip-Dp7KCxV3.js";import"./useClickOutside-7CVsvZOS.js";import"./EnablePortalWrapper-Bgr-lnxn.js";import"./dialog-D9O7a7Fm.js";import"./Tree-B0WGJo-9.js";import"./_Uint8Array-CwPxMkg2.js";import"./IconMinus16-DXggxjOv.js";import"./IconPlus16-Dg8csfiP.js";const xe={title:"Components/Number Input",component:i,tags:["autodocs"],args:{clearable:!1},argTypes:{decorator:{description:"Add decorator element to start of the input",name:"decorator",defaultValue:void 0},suffix:{description:"String to append to the input value.",name:"suffix",defaultValue:void 0,control:{type:"text"}},disabled:{type:"boolean",table:{type:{summary:"boolean | undefined"},defaultValue:{summary:!1}}},readOnly:{type:"boolean",table:{type:{summary:"boolean | undefined"},defaultValue:{summary:!1}}},controls:{description:"Enable increment buttons",name:"controls",defaultValue:!1,control:{type:"boolean"}},clearable:{description:"Enable clear button",name:"clearable",defaultValue:!1,control:{type:"boolean"}},hugWidth:{description:"If `true` element will have a `auto` width, else `full` width",defaultValue:!1,control:{type:"boolean"}},status:{description:"Set the current status of the input",name:"status",options:Object.values(n),control:{type:"select"},defaultValue:n.Default},stepInterval:{description:"Set the incremental value",name:"stepInterval",defaultValue:10,control:{type:"number"}},valueSelect:{description:"Highlight current input value.",name:"valueSelect",defaultValue:!1,control:{type:"boolean"}},onChange:{description:"onChange callback",name:"onChange",defaultValue:void 0,action:"onChange"},"data-test-id":{table:{disable:!0}}},parameters:{status:{type:"deprecated"},docs:{description:{component:'### This component is deprecated, please use the [new Text Input component](/docs/current_components-text-input--documentation) with `type="number"` instead.'}}}},t=e=>o.jsx(i,{...e,placeholder:"Enter a number..."});t.args={clearable:!0};const r=e=>o.jsx(i,{...e,controls:!0,decorator:o.jsx(_,{})}),a=e=>{const[x,v]=u.useState(n.Success),[N,W]=u.useState(!1),E=(l=0)=>{v(l<0?n.Error:n.Success),W(l<0)};return o.jsx(i,{...e,onChange:E,controls:!0,status:x,valueSelect:N,defaultValue:3})},s=e=>o.jsx(w,{className:"tw-w-[400px]",children:o.jsx(i,{...e,controls:!0,hugWidth:!0,placeholder:"Input has a width of `auto`"})});t.__docgenInfo={description:"",methods:[],displayName:"BaseUsage"};r.__docgenInfo={description:"",methods:[],displayName:"WithDecoratorAndIncrementable"};a.__docgenInfo={description:"",methods:[],displayName:"WithErrorLessThanZero"};s.__docgenInfo={description:"",methods:[],displayName:"WithHugWidth"};var p,c,m;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  return <NumberInput {...args} placeholder="Enter a number..." />;
}`,...(m=(c=t.parameters)==null?void 0:c.docs)==null?void 0:m.source}}};var d,h,f;r.parameters={...r.parameters,docs:{...(d=r.parameters)==null?void 0:d.docs,source:{originalSource:`args => {
  return <NumberInput {...args} controls decorator={<IconNook16 />} />;
}`,...(f=(h=r.parameters)==null?void 0:h.docs)==null?void 0:f.source}}};var b,g,S;a.parameters={...a.parameters,docs:{...(b=a.parameters)==null?void 0:b.docs,source:{originalSource:`args => {
  const [status, setStatus] = useState<Validation>(Validation.Success);
  const [valueSelect, setValueSelect] = useState<boolean>(false);
  const handleValidation = (value: number = 0) => {
    setStatus(value < 0 ? Validation.Error : Validation.Success);
    setValueSelect(value < 0);
  };
  return <NumberInput {...args} onChange={handleValidation} controls status={status} valueSelect={valueSelect} defaultValue={3} />;
}`,...(S=(g=a.parameters)==null?void 0:g.docs)==null?void 0:S.source}}};var V,y,I;s.parameters={...s.parameters,docs:{...(V=s.parameters)==null?void 0:V.docs,source:{originalSource:`args => {
  return <Box className="tw-w-[400px]">
            <NumberInput {...args} controls hugWidth placeholder="Input has a width of \`auto\`" />
        </Box>;
}`,...(I=(y=s.parameters)==null?void 0:y.docs)==null?void 0:I.source}}};const ve=["BaseUsage","WithDecoratorAndIncrementable","WithErrorLessThanZero","WithHugWidth"];export{t as BaseUsage,r as WithDecoratorAndIncrementable,a as WithErrorLessThanZero,s as WithHugWidth,ve as __namedExportsOrder,xe as default};
