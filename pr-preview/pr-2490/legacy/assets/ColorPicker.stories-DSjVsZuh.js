import{r as n,j as y}from"./iframe-l0QJhPg2.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-CghmFXdZ.js";import"./preload-helper-ClJkntjM.js";import"./SegmentedControls-DwQJgLyP.js";import"./useFocusRing-Cv6Nj6VU.js";import"./useEffectEvent-DMOUn1MU.js";import"./useFocusable-OCbG4bop.js";import"./chain-CS3UA_VO.js";import"./index-CUNTRpeU.js";import"./useFormValidationState-CDJkVAlX.js";import"./FocusScope-DB4a0Ubn.js";import"./useField-_Cuy7iFx.js";import"./useLabels-BzA1nbJ-.js";import"./context-B3YZuPJb.js";import"./VisuallyHidden-CJhS9cmL.js";import"./useControlledState-CFG4g-bA.js";import"./useMemoizedId-CyO3ygRy.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CT65CiZD.js";import"./TextInput-C6EBdYM3.js";import"./LoadingCircle-DesUOSVB.js";import"./IconCheckMark-D4b_H2JN.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BRRJjj88.js";import"./IconExclamationMarkTriangle-Nr6Rxbk7.js";import"./IconExclamationMarkTriangle24-BppZ2KTU.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-pxPHnLbr.js";import"./useLink-DUbBK_PD.js";import"./usePopper-UT0i-yBc.js";import"./index-edjICtv5.js";import"./Button-bwErzbwC.js";import"./useButton-DY3u421-.js";import"./Portal-DKISOlQg.js";import"./IconExclamationMarkCircle24-B0QU41eT.js";import"./IconMagnifier-CbEipJSM.js";import"./IconMagnifier16-B9Ex_6vh.js";import"./index-DXpXkuyk.js";import"./Dropdown-BFRzZKjk.js";import"./useOverlayTriggerState-BouXr8l_.js";import"./useMenuTrigger-j2cq4B_t.js";import"./useLocalizedStringFormatter-D02eeuhF.js";import"./helper-Wu38vShE.js";import"./keyboard-ez5hRGkN.js";import"./SelectionManager-CDz5YniA.js";import"./MenuItem-CAezuxY7.js";import"./IconCaretRight-Ba8KjB_6.js";import"./elements-BOYmskOL.js";import"./Trigger-02mmuDpd.js";import"./IconCaretDown-BMue8eiT.js";import"./IconCaretDown16-Bud0Jo04.js";import"./IconTrashBin16-CeWPQHON.js";import"./IconTrashBin24-CD9xSS0e.js";import"./EnablePortalWrapper-CHPePV9p.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
