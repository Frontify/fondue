import{r as n,j as y}from"./iframe-De5WdDij.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-Cs7667Qb.js";import"./preload-helper-ClJkntjM.js";import"./SegmentedControls-Cp4Z2u0P.js";import"./useFocusRing-CDNuK9Yy.js";import"./useEffectEvent-Oo8ltylB.js";import"./useFocusable-BRaVtCgU.js";import"./chain-uDd9vtXp.js";import"./index-OktaPfof.js";import"./useFormValidationState-Dvh7J7d5.js";import"./FocusScope-Fc_hKNYU.js";import"./useField-ClQqDpYA.js";import"./useLabels-Buo-DWDy.js";import"./context-IzgTfYKF.js";import"./VisuallyHidden-a9fblbuF.js";import"./useControlledState-Dc1RW1nq.js";import"./useMemoizedId-C_RAM1u5.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-iIqYbNJG.js";import"./TextInput-D-oGAlNq.js";import"./LoadingCircle-Gd4Agliv.js";import"./IconCheckMark-Dwl8F3NX.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BPIha1Ld.js";import"./IconExclamationMarkTriangle-D7c6olcW.js";import"./IconExclamationMarkTriangle24-DIV8Z7-v.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-k6QBDt5j.js";import"./useLink-Dlv3Y4nM.js";import"./usePopper-CPSdMAYJ.js";import"./index-BMpwRIf4.js";import"./Button-09EX6ZTM.js";import"./useButton-wWrMugoC.js";import"./Portal-Gz9-g2Z0.js";import"./IconExclamationMarkCircle24-Y07_rCrq.js";import"./IconMagnifier-CQUdapMS.js";import"./IconMagnifier16-C9LCL4mZ.js";import"./index-Dnv4t82b.js";import"./Dropdown-ChyJAipO.js";import"./useOverlayTriggerState-B9SrujZh.js";import"./useMenuTrigger-CCLXEo6s.js";import"./useLocalizedStringFormatter-CSBD8Wrw.js";import"./helper-BnolPM_n.js";import"./keyboard-Db0PXyBP.js";import"./SelectionManager-Cbaox9XQ.js";import"./MenuItem-CB3827LO.js";import"./IconCaretRight-CZbFa_6C.js";import"./elements-BOYmskOL.js";import"./Trigger-D24NGVoU.js";import"./IconCaretDown-qTkkGzu1.js";import"./IconCaretDown16-B-zdzFN4.js";import"./IconTrashBin16-CJnKFFEA.js";import"./IconTrashBin24-Ok3Wr0xL.js";import"./EnablePortalWrapper-CR6SPP09.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
