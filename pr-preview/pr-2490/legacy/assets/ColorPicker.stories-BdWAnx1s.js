import{r as n,j as y}from"./iframe-8Aj-00-r.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-DE_KnSr4.js";import"./preload-helper-ClJkntjM.js";import"./SegmentedControls-i4_DGfgR.js";import"./useFocusRing-qG24ebph.js";import"./useEffectEvent-Cq9opHnK.js";import"./useFocusable-BwZ_9y-T.js";import"./chain-BjqAHd5L.js";import"./index-DCNbMVtB.js";import"./useFormValidationState-QoNIVx9j.js";import"./FocusScope-CTjdKyO5.js";import"./useField-BLaRcGJ8.js";import"./useLabels-CzFGOsdE.js";import"./context-DJA_byga.js";import"./VisuallyHidden-pr9n8Eu6.js";import"./useControlledState-D_xv8YeC.js";import"./useMemoizedId-CGc7h3BS.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-QruPrv8V.js";import"./TextInput-p2yGTJcX.js";import"./LoadingCircle-CiFVWgYB.js";import"./IconCheckMark-W08NCNhP.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BxAiCgtg.js";import"./IconExclamationMarkTriangle-CTaWxLT5.js";import"./IconExclamationMarkTriangle24-DBim1kUj.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-C9tle7yu.js";import"./useLink-BNAZ-U-L.js";import"./usePopper-CXS_WYpq.js";import"./index-Dnw8Dsyi.js";import"./Button-CG-0nyWt.js";import"./useButton-Dojg9qor.js";import"./Portal-Bz1ny3RM.js";import"./IconExclamationMarkCircle24-wOO7RqI2.js";import"./IconMagnifier-CQDpH3dy.js";import"./IconMagnifier16-CrnPk8PV.js";import"./index-hwbonGE_.js";import"./Dropdown-C-O-Den-.js";import"./useOverlayTriggerState-ChNjsbrI.js";import"./useMenuTrigger-B56YI9sB.js";import"./useLocalizedStringFormatter-B8RupXhl.js";import"./helper-CFr4oJ23.js";import"./keyboard-BqGaruCr.js";import"./SelectionManager-BrlFgUVk.js";import"./MenuItem-DpQE8dX8.js";import"./IconCaretRight-Dx4qKvYw.js";import"./elements-BOYmskOL.js";import"./Trigger-Bafp_Ri-.js";import"./IconCaretDown-ByO_B0hy.js";import"./IconCaretDown16-l4VSPtYz.js";import"./IconTrashBin16-DiEpovv2.js";import"./IconTrashBin24-CL9xT_lP.js";import"./EnablePortalWrapper-doVjENwO.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
