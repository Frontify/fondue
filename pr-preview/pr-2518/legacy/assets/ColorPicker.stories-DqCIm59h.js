import{r as n,j as y}from"./iframe-87vQE0G8.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-Dq8e3uF3.js";import"./preload-helper-D9dL-qgt.js";import"./SegmentedControls-Lc7p9LQT.js";import"./useFocusRing-YMxsAiq0.js";import"./useEffectEvent-CJcvK5ne.js";import"./useFocusable-D5IUiL0q.js";import"./chain-Cw4GZpOU.js";import"./index-DVCfecQC.js";import"./useFormValidationState-wbr_tgEK.js";import"./FocusScope-DHfVm_l9.js";import"./useField-DBVX4GJg.js";import"./useLabels-jWx42sHR.js";import"./context-2BHA2EyD.js";import"./VisuallyHidden-CQ8E5OL9.js";import"./useControlledState-Bkf0EWx5.js";import"./useMemoizedId-1N2am3Y0.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CWAcRV2T.js";import"./TextInput-BcLe5O15.js";import"./LoadingCircle-BxwRdzx8.js";import"./IconCheckMark-_BQk6PBx.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-pAScAbBc.js";import"./IconExclamationMarkTriangle-C1fztYa9.js";import"./IconExclamationMarkTriangle24-BTPIBAv2.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip--lHixilP.js";import"./useLink-DwC9KDJ-.js";import"./usePopper-CDDnR_Bd.js";import"./index-BPT-xlNM.js";import"./Button-mrkxkHAJ.js";import"./useButton-DgiAo-w-.js";import"./Portal-CNkWJhCS.js";import"./IconExclamationMarkCircle24-CqxwnR-h.js";import"./IconMagnifier-DNKLymI6.js";import"./IconMagnifier16-CfqODSFd.js";import"./index-DQ7-RC_1.js";import"./Dropdown-CENt-amT.js";import"./useOverlayTriggerState-C5Cqp7e2.js";import"./useMenuTrigger-SoCdOQ3f.js";import"./useLocalizedStringFormatter-mhurvlLL.js";import"./helper-BE2z1LbC.js";import"./keyboard-DcYGx1hd.js";import"./SelectionManager-9V3_EDSe.js";import"./MenuItem-BPdhgbF5.js";import"./IconCaretRight-B8bLxwUE.js";import"./elements-BOYmskOL.js";import"./Trigger-Bty4cM6h.js";import"./IconCaretDown-D_0C5ltI.js";import"./IconCaretDown16-CjVSXkgg.js";import"./IconTrashBin16-BPoHWN31.js";import"./IconTrashBin24-bB_weWuu.js";import"./EnablePortalWrapper-OWct0vFK.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
