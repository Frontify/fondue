import{j as f}from"./jsx-runtime-DF2Pcvd1.js";import{r as n}from"./index-B2-qRKKC.js";import{C as y}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-B2cU2QzA.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./SegmentedControls-BCU10Zi9.js";import"./useFocusRing-T6RsE8HB.js";import"./useEffectEvent-Bx4XsOxK.js";import"./useFocusable-DCA70-1P.js";import"./chain-DrsK4odg.js";import"./index-CFX93qP1.js";import"./useFormReset-BGrECoD3.js";import"./useFormValidation-eNYIok5g.js";import"./FocusScope-B39fRxFN.js";import"./useField-BZj96zT2.js";import"./useLabels-BW8UQRuD.js";import"./VisuallyHidden-CzhTb-YE.js";import"./useFormValidationState-ChdbfkJG.js";import"./useControlledState-CmdEzstM.js";import"./useMemoizedId-BB39KVn8.js";import"./focusStyle-BtNTXUM4.js";import"./merge-DI-veSMP.js";import"./motion-bD4j9jgw.js";import"./TextInput-D-QE4MGv.js";import"./LoadingCircle-DyxURJrK.js";import"./IconCheckMark-Db5JnUcj.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-Bq7BKjxu.js";import"./IconExclamationMarkTriangle-BrhtYKnY.js";import"./IconExclamationMarkTriangle24-DvJpj6jb.js";import"./validation-CJXPAjNB.js";import"./LegacyTooltip-BNHnu4B-.js";import"./usePopper-jmXS5rjc.js";import"./index-DlnOb27V.js";import"./Button-DoFA_mR5.js";import"./useButton-Z8es05E6.js";import"./Portal-CuQPhhwF.js";import"./IconExclamationMarkCircle24-DMv0ETG3.js";import"./IconMagnifier-7rctpR_z.js";import"./IconMagnifier16-DEM6G4cO.js";import"./index-CUvMEafb.js";import"./Dropdown-BiCZ2EvV.js";import"./useOverlayTriggerState-DyEqI0jj.js";import"./useMenuTrigger-PJ0NGR14.js";import"./useLocalizedStringFormatter-SsZox6da.js";import"./context-C9H3dKSh.js";import"./helper-pgFlSdzm.js";import"./keyboard-DWb2Gtmz.js";import"./SelectionManager-CwM1DjHu.js";import"./MenuItem-XetEy-kP.js";import"./IconCaretRight-DMA6RW71.js";import"./elements-BOYmskOL.js";import"./Trigger-DH3ouR-2.js";import"./IconCaretDown-CAp4CI-i.js";import"./IconCaretDown16-CINgO7jA.js";import"./IconTrashBin16-DHeQSCR9.js";import"./IconTrashBin24-D7tnFyiH.js";import"./EnablePortalWrapper-C3Ay3AqL.js";const hr={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(y.Hex);return f.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const Br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,Br as __namedExportsOrder,hr as default};
