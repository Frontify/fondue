import{r as n,j as y}from"./iframe-BIHtZq1U.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-UA_7JeOM.js";import"./preload-helper-OAyExbmo.js";import"./SegmentedControls-Mr1Iex0V.js";import"./useFocusRing-Da_21BgF.js";import"./useEffectEvent-B6YEwqBF.js";import"./useFocusable-CCZ_IdsK.js";import"./chain-BJcYIR2n.js";import"./index-BaBp4jCW.js";import"./useFormValidationState-DX0Jxj92.js";import"./FocusScope-D3WjdVoV.js";import"./useField-C-jP7PP4.js";import"./useLabels-CsVTyMz0.js";import"./context-Bs0yD0C5.js";import"./VisuallyHidden-BVpZREPf.js";import"./useControlledState-Ch5mM6EN.js";import"./useMemoizedId-8iqIoAJZ.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-Cq-NZqnJ.js";import"./TextInput-LNvw8Zy7.js";import"./LoadingCircle-BPnjjCMJ.js";import"./IconCheckMark-ByDDCOdk.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-uSSJtr0W.js";import"./IconExclamationMarkTriangle-Eu8lIART.js";import"./IconExclamationMarkTriangle24-DWved3Uv.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-CyQP51yp.js";import"./useLink-BGmSUlDQ.js";import"./usePopper-CDDU-Abt.js";import"./index-AB-0uad5.js";import"./Button-mGP0pMyC.js";import"./useButton-DWxqWwpW.js";import"./Portal-XQEcDBQ_.js";import"./IconExclamationMarkCircle24-Dr5MpX5j.js";import"./IconMagnifier-DhJS73OY.js";import"./IconMagnifier16-CG5v6org.js";import"./index-BO4_puPL.js";import"./Dropdown-B4ISVlBN.js";import"./useOverlayTriggerState-BkNFCR_E.js";import"./useMenuTrigger-eQ_6GCii.js";import"./useLocalizedStringFormatter-DFpdFw8u.js";import"./helper-KKu_vcbg.js";import"./keyboard-BvwPagi2.js";import"./SelectionManager-C4BYkeTT.js";import"./MenuItem-CGosstT4.js";import"./IconCaretRight-ktveUp1R.js";import"./elements-BOYmskOL.js";import"./Trigger-Btbv4h_W.js";import"./IconCaretDown-nRwc6BJm.js";import"./IconCaretDown16-BBlgb7KY.js";import"./IconTrashBin16-kc1AA4xY.js";import"./IconTrashBin24-DmxFkRQV.js";import"./EnablePortalWrapper-B0IMxAw1.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
