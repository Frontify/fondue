import{r as n,j as y}from"./iframe-DlqR6AYe.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-B0pn45S7.js";import"./preload-helper-D7hvLZ4Y.js";import"./SegmentedControls-3XDpPKy9.js";import"./useFocusRing-DNtrobjq.js";import"./useEffectEvent-Dj1B-YfH.js";import"./useFocusable-DA7pXR9i.js";import"./chain-DXNJaT1s.js";import"./index-DYFFyKj-.js";import"./useFormValidationState-BS-DAisB.js";import"./FocusScope-BfKh0sBS.js";import"./useField-D___O1Dt.js";import"./useLabels-CxRu58lS.js";import"./context-BSKtlgXn.js";import"./VisuallyHidden-CCxRk6J0.js";import"./useControlledState-BMsKPruL.js";import"./useMemoizedId-GoCZIqhn.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-DcQ8ihgH.js";import"./TextInput-CiBvIeoH.js";import"./LoadingCircle-Do-r--xq.js";import"./IconCheckMark-lzA40FAd.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BXwDlxZD.js";import"./IconExclamationMarkTriangle-BK2u7XiP.js";import"./IconExclamationMarkTriangle24-BdCxa8EH.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-CU1H6lDZ.js";import"./useLink-qhltQ58f.js";import"./usePopper-rFQeOltH.js";import"./index-UZCdOU-e.js";import"./Button-Ce6Hz3tz.js";import"./useButton-BO4vCvKH.js";import"./Portal-ZI8jxOqw.js";import"./IconExclamationMarkCircle24-BMMgRLQy.js";import"./IconMagnifier-BUHMXyx4.js";import"./IconMagnifier16-CoP7xmuG.js";import"./index-DCt7_Hrp.js";import"./Dropdown-YHN_JuhB.js";import"./useOverlayTriggerState-tdZrFqSx.js";import"./useMenuTrigger-DkngeS2R.js";import"./useLocalizedStringFormatter-Dco2h93P.js";import"./helper-M5NX9tKg.js";import"./keyboard-DmqGV1OW.js";import"./SelectionManager-CJi8pMuq.js";import"./MenuItem-J4_UHH1v.js";import"./IconCaretRight-8AGmSob8.js";import"./elements-BOYmskOL.js";import"./Trigger-DJRyMBNI.js";import"./IconCaretDown-RbfFbgKr.js";import"./IconCaretDown16-B_xt-Z8A.js";import"./IconTrashBin16-J7sGGzjj.js";import"./IconTrashBin24-Bh2zCWt_.js";import"./EnablePortalWrapper-DqLc8zPE.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
