import{r as n,j as y}from"./iframe-sarzTi8L.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-Bhv_PGlP.js";import"./preload-helper-D7hvLZ4Y.js";import"./SegmentedControls-rY7cFSac.js";import"./useFocusRing-CJslZTVh.js";import"./useEffectEvent-DXJV4zsr.js";import"./useFocusable-BZQrvG5Y.js";import"./chain-MnvsB7gO.js";import"./index-DJJW3p-i.js";import"./useFormValidationState-4Te4vK6C.js";import"./FocusScope-P5bOB2vt.js";import"./useField-DQpSeNBl.js";import"./useLabels-DaOB8GSh.js";import"./context-XNnUZXRo.js";import"./VisuallyHidden-CHKlsusl.js";import"./useControlledState-B6Tx6Nhk.js";import"./useMemoizedId-C2H8E_mU.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-BKYnMe1M.js";import"./TextInput-CyegwwzZ.js";import"./LoadingCircle-B6EIods_.js";import"./IconCheckMark-B35tL5o7.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-B83ZgxXS.js";import"./IconExclamationMarkTriangle-D_Bn4azM.js";import"./IconExclamationMarkTriangle24-l8-Sm8AF.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-C-HQV77A.js";import"./useLink-Y2z5Scob.js";import"./usePopper-Ck-CZu4g.js";import"./index-D2Z16GHo.js";import"./Button-V9rFQHqA.js";import"./useButton-BfqVDKT2.js";import"./Portal-CFiQojYp.js";import"./IconExclamationMarkCircle24-BJNv-ZIi.js";import"./IconMagnifier-DILcMGId.js";import"./IconMagnifier16-ClJa3XR3.js";import"./index-Dpc5PRnS.js";import"./Dropdown-D0QoluBk.js";import"./useOverlayTriggerState-DSQygKkJ.js";import"./useMenuTrigger-CBYvAq20.js";import"./useLocalizedStringFormatter-B23C7ASf.js";import"./helper-Dnk_2WII.js";import"./keyboard-pOdpzWDh.js";import"./SelectionManager-DApxaQsk.js";import"./MenuItem-iV4b_DNd.js";import"./IconCaretRight-CoQWVhFV.js";import"./elements-BOYmskOL.js";import"./Trigger-DpjUExqf.js";import"./IconCaretDown-JRJFTHDc.js";import"./IconCaretDown16-Dr5y3NF-.js";import"./IconTrashBin16-B1LvMOjZ.js";import"./IconTrashBin24-yZhZCG6Y.js";import"./EnablePortalWrapper-KCbmKcGa.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
