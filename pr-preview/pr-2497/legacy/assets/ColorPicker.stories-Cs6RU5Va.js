import{r as n,j as y}from"./iframe-BqDpTz8L.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-BcpiyGiI.js";import"./preload-helper-ByQXrLpA.js";import"./SegmentedControls-q8V4RdWX.js";import"./useFocusRing-Xgnq7-RG.js";import"./useEffectEvent-CfjbAp9f.js";import"./useFocusable-C1aQJPOg.js";import"./chain-BF0-ro9P.js";import"./index-D7I4QJ3V.js";import"./useFormValidationState-BoxxuQfu.js";import"./FocusScope-CrwMUh0H.js";import"./useField-BAnoDg69.js";import"./useLabels-CShK178M.js";import"./context-Cuf97275.js";import"./VisuallyHidden-Z6NBypG9.js";import"./useControlledState-DRzZhX7e.js";import"./useMemoizedId-Dw0wROnJ.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-B6-Rhmya.js";import"./TextInput-CRHj7Htq.js";import"./LoadingCircle-BxttBEHu.js";import"./IconCheckMark-BbPCPrTa.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-B8K-nVuA.js";import"./IconExclamationMarkTriangle-DRWrILNB.js";import"./IconExclamationMarkTriangle24-XYss3Qca.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-h-bi0B10.js";import"./useLink-_NQoLbRX.js";import"./usePopper-s4jp2qgP.js";import"./index-CY-jsk3T.js";import"./Button-Bkb2ujAG.js";import"./useButton-BGLu1zCr.js";import"./Portal-B7rzZNWn.js";import"./IconExclamationMarkCircle24-BixhjAUI.js";import"./IconMagnifier-DqumZR6i.js";import"./IconMagnifier16-B_hljRSE.js";import"./index-BbX6LMSL.js";import"./Dropdown-DIeWOy5O.js";import"./useOverlayTriggerState-Dxar4kSR.js";import"./useMenuTrigger-B-xTmkst.js";import"./useLocalizedStringFormatter-CT_IKlGg.js";import"./helper-CawoOU1g.js";import"./keyboard-D68Nodq9.js";import"./SelectionManager-ClMwx0j_.js";import"./MenuItem-PZQtIurR.js";import"./IconCaretRight-PlITsN3f.js";import"./elements-BOYmskOL.js";import"./Trigger-DSSj9pCU.js";import"./IconCaretDown-R6whlyjw.js";import"./IconCaretDown16-Bdm0zhQl.js";import"./IconTrashBin16-DR0ZRfF3.js";import"./IconTrashBin24-CciGS0Cs.js";import"./EnablePortalWrapper-Dvj5TfsF.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
