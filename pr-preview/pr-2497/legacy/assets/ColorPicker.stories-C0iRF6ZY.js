import{r as n,j as y}from"./iframe-Djhyb1Nw.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-BSKEK6_4.js";import"./preload-helper-ByQXrLpA.js";import"./SegmentedControls-C6PTeH6o.js";import"./useFocusRing-BK8gfdmv.js";import"./useEffectEvent-D8GnYFw3.js";import"./useFocusable-RQra_wsh.js";import"./chain-BBFq5J0-.js";import"./index-Dck4b_ZY.js";import"./useFormValidationState-CHKEXlxK.js";import"./FocusScope-BrSo0WOE.js";import"./useField-foZtG_xK.js";import"./useLabels-EzQDK0_-.js";import"./context-Dw9gC9MP.js";import"./VisuallyHidden-CHKAONgM.js";import"./useControlledState-tL2x730j.js";import"./useMemoizedId-D3WKz3gH.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-BbyVxfuG.js";import"./TextInput-Dxto4TCR.js";import"./LoadingCircle-CvhdSucE.js";import"./IconCheckMark-DpPTXnBy.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BKTNGjjx.js";import"./IconExclamationMarkTriangle-CqCA4URp.js";import"./IconExclamationMarkTriangle24-zRe49Xao.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-Cb5X18lM.js";import"./useLink-CfY98U_U.js";import"./usePopper-ziJ2hQm4.js";import"./index-GoQApQif.js";import"./Button-ssJq5wZ5.js";import"./useButton-B99H2_Qx.js";import"./Portal-WVq5P5Ln.js";import"./IconExclamationMarkCircle24-B4LDGZRs.js";import"./IconMagnifier-WM8NMll4.js";import"./IconMagnifier16-Cbe3Cw45.js";import"./index-Bq7ZzHqf.js";import"./Dropdown-DWhof__V.js";import"./useOverlayTriggerState-D6SmIhNB.js";import"./useMenuTrigger-BbU1vduN.js";import"./useLocalizedStringFormatter-f21rb2a6.js";import"./helper-Dy-jpPWj.js";import"./keyboard-BKAfbxGK.js";import"./SelectionManager-CwO2Two3.js";import"./MenuItem-D7vyBlaq.js";import"./IconCaretRight-Dbb0p0Yv.js";import"./elements-BOYmskOL.js";import"./Trigger-CCbe5bxU.js";import"./IconCaretDown-BHUKYEtH.js";import"./IconCaretDown16-CGARgb4W.js";import"./IconTrashBin16-BpFa3dsJ.js";import"./IconTrashBin24-C8KwJ_wL.js";import"./EnablePortalWrapper-D4jAT6wB.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
