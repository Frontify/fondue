import{r as n,j as y}from"./iframe-D7sy4xpx.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-gjMmESpy.js";import"./preload-helper-D5qcpbyD.js";import"./SegmentedControls-DUh6_uRu.js";import"./useFocusRing-WiOBaN36.js";import"./useEffectEvent-DlN4b1VG.js";import"./useFocusable-b3_Iq_aJ.js";import"./chain-BymMFmeJ.js";import"./index-DwQQnJlT.js";import"./useFormValidationState-D9XgnKSN.js";import"./FocusScope-i-5CSdu1.js";import"./useField-B01EU0XD.js";import"./useLabels-Blyommyn.js";import"./context-B61iDk61.js";import"./VisuallyHidden-CeceVG54.js";import"./useControlledState-DwGGjx3X.js";import"./useMemoizedId-CwwPF4gy.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CO6dyMyA.js";import"./TextInput-Bx10SaWy.js";import"./LoadingCircle-BQ0evsM9.js";import"./IconCheckMark-CIqMCS41.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-drLq2WNq.js";import"./IconExclamationMarkTriangle-BfrYu7jT.js";import"./IconExclamationMarkTriangle24-CUOt1Yz_.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-cn45ntVE.js";import"./useLink-CL4VGZfG.js";import"./usePopper-CJvB9LLR.js";import"./index-3l7JjlNh.js";import"./Button-DEB8PLLZ.js";import"./useButton-BzdN_3XI.js";import"./Portal-B_6AOlsI.js";import"./IconExclamationMarkCircle24-D5O0dO8v.js";import"./IconMagnifier-BNCKo7AD.js";import"./IconMagnifier16-InBbqUqJ.js";import"./index-DG9JLugQ.js";import"./Dropdown-Bu55er1w.js";import"./useOverlayTriggerState-BcGtZFB6.js";import"./useMenuTrigger-Dvlm422P.js";import"./useLocalizedStringFormatter-DvaMBSMR.js";import"./helper-ChSewBYb.js";import"./keyboard-BoxrP_Gl.js";import"./SelectionManager-vVt0pswu.js";import"./MenuItem-CvdFQWLC.js";import"./IconCaretRight-grzHKMpF.js";import"./elements-BOYmskOL.js";import"./Trigger-DJDqn6_h.js";import"./IconCaretDown-BcvnAaV6.js";import"./IconCaretDown16-C1emQBb_.js";import"./IconTrashBin16-CZgyFd-i.js";import"./IconTrashBin24-D7P9aEXw.js";import"./EnablePortalWrapper-fTgbhwPV.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
