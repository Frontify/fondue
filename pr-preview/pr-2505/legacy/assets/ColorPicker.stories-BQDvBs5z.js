import{r as n,j as y}from"./iframe-CHTDhBOw.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-DlYwFl5j.js";import"./preload-helper-DpV-BRze.js";import"./SegmentedControls-BKmvZJo5.js";import"./useFocusRing-B9ljnzvU.js";import"./useEffectEvent-C_zZUYtw.js";import"./useFocusable-wUQP4iRG.js";import"./chain-gGRwirEw.js";import"./index-NZpU9fsB.js";import"./useFormValidationState-B2zh8KVN.js";import"./FocusScope-CbrJ0X92.js";import"./useField-yVlFEyW7.js";import"./useLabels-IJBk5yiI.js";import"./context-BiY5BK-o.js";import"./VisuallyHidden-BCHw-yIg.js";import"./useControlledState-Dyp77OM5.js";import"./useMemoizedId-BEUTTPGp.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-Zdv9q7PW.js";import"./TextInput-CWHjYK3t.js";import"./LoadingCircle-CH8flQ6d.js";import"./IconCheckMark-CQY-3-zS.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-DWeuQ1JS.js";import"./IconExclamationMarkTriangle-mlvDeGrH.js";import"./IconExclamationMarkTriangle24-C2n0SPiZ.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-uEHKcS05.js";import"./useLink-C1eg4OUw.js";import"./usePopper-C5FqElHn.js";import"./index-B1BGL-gG.js";import"./Button-BGdoAku5.js";import"./useButton-DQwwQNDs.js";import"./Portal-nIPd8MLx.js";import"./IconExclamationMarkCircle24-DIy9V4jm.js";import"./IconMagnifier-CoRrhC9x.js";import"./IconMagnifier16-CiDa0PKT.js";import"./index-CTALpgpt.js";import"./Dropdown-jHV7NTSi.js";import"./useOverlayTriggerState-ChnurNZW.js";import"./useMenuTrigger-grTO5Qe1.js";import"./useLocalizedStringFormatter-BQCdTs0l.js";import"./helper-B9AmTkD4.js";import"./keyboard-Db7mZRua.js";import"./SelectionManager-CfehHhqG.js";import"./MenuItem-Uj9s8-V9.js";import"./IconCaretRight-B_wMabco.js";import"./elements-BOYmskOL.js";import"./Trigger-Bl0mFWY9.js";import"./IconCaretDown-B2SIJpLO.js";import"./IconCaretDown16-Cz4JQCqT.js";import"./IconTrashBin16-P9BnFBNa.js";import"./IconTrashBin24-BtqjXLr0.js";import"./EnablePortalWrapper-BLiyXpiv.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
