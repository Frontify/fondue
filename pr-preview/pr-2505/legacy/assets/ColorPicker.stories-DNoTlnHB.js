import{r as n,j as y}from"./iframe-CArh3U2R.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-I2CgcFHM.js";import"./preload-helper-DpV-BRze.js";import"./SegmentedControls-p0hsZVuK.js";import"./useFocusRing-Dk1gKGXm.js";import"./useEffectEvent-YMJ2RRp9.js";import"./useFocusable-BQQ-aorh.js";import"./chain-XO24dopb.js";import"./index-NcOw1q2c.js";import"./useFormValidationState-BoBNGpWz.js";import"./FocusScope-B2z7Ekf-.js";import"./useField-BTgK3D8A.js";import"./useLabels-DfoDTXX1.js";import"./context-CXAT3o9r.js";import"./VisuallyHidden-CsbgYlo5.js";import"./useControlledState-B6AaEMaT.js";import"./useMemoizedId-DWWCqZzw.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-K70Dq9tF.js";import"./TextInput-B5eKkgOy.js";import"./LoadingCircle-B3caMxJh.js";import"./IconCheckMark-fZKVZSXZ.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-Bn4Yb7Uk.js";import"./IconExclamationMarkTriangle-CpHRnvpz.js";import"./IconExclamationMarkTriangle24-CVz-ZF86.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-KCzikuHf.js";import"./useLink-CLCUz5KQ.js";import"./usePopper-u01rWO-b.js";import"./index-qy9vPm5y.js";import"./Button-ChMCF2L2.js";import"./useButton-D6AuNLTw.js";import"./Portal-BcBrSEu7.js";import"./IconExclamationMarkCircle24-B8MY2-G8.js";import"./IconMagnifier-BSpZiIv0.js";import"./IconMagnifier16-r4npDTY4.js";import"./index-Cm8aE7Fq.js";import"./Dropdown-LuZt6Ypd.js";import"./useOverlayTriggerState-5GEDeYy2.js";import"./useMenuTrigger-B1mJO2E5.js";import"./useLocalizedStringFormatter-C9CzXHR_.js";import"./helper-lDW7aUtM.js";import"./keyboard-TPZ6EUrT.js";import"./SelectionManager-C6YXDrEl.js";import"./MenuItem-CCx8taAH.js";import"./IconCaretRight-Cy9k5xYc.js";import"./elements-BOYmskOL.js";import"./Trigger-B-R3TvPg.js";import"./IconCaretDown-COXRRCVT.js";import"./IconCaretDown16-BMJgRViX.js";import"./IconTrashBin16-tWHvn42_.js";import"./IconTrashBin24-C1q5nmsK.js";import"./EnablePortalWrapper-FQwpj0I2.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
