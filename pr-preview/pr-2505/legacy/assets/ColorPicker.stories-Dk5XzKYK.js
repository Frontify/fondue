import{r as n,j as y}from"./iframe-C2ar3Utf.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-BYyznJ9j.js";import"./preload-helper-DpV-BRze.js";import"./SegmentedControls-gHyqxByG.js";import"./useFocusRing-ckjGDaB9.js";import"./useEffectEvent-HUb76GIf.js";import"./useFocusable-B1lF6NHK.js";import"./chain-B8CRNRIy.js";import"./index-60xSEIfD.js";import"./useFormValidationState-Bp83Ej5q.js";import"./FocusScope-DAI2Vs7v.js";import"./useField-DZ2m_Rbp.js";import"./useLabels-D_FZSpVM.js";import"./context-WMCLAh4W.js";import"./VisuallyHidden-Q1kRTQKP.js";import"./useControlledState-Co2Ccj5a.js";import"./useMemoizedId-DysWXBo7.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-meQ3QWXB.js";import"./TextInput-4DApBXSu.js";import"./LoadingCircle-DBAs6Vfq.js";import"./IconCheckMark-DT6ELjh0.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BJLzEk4o.js";import"./IconExclamationMarkTriangle-DUVfJ7Ey.js";import"./IconExclamationMarkTriangle24-DdJA7dHC.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-BQLH6NNZ.js";import"./useLink-30c0The6.js";import"./usePopper-CEndrzxl.js";import"./index-DrND0Ud_.js";import"./Button-DsLyXgPb.js";import"./useButton-DzmDR489.js";import"./Portal-vcMJoXCl.js";import"./IconExclamationMarkCircle24-C5-ZFPp4.js";import"./IconMagnifier-BKhVb-t7.js";import"./IconMagnifier16-D678c0Kl.js";import"./index-LgATJnWV.js";import"./Dropdown-D9D_kJtQ.js";import"./useOverlayTriggerState-DRYlbfT3.js";import"./useMenuTrigger-CWEiTbyn.js";import"./useLocalizedStringFormatter-B4TnEBYy.js";import"./helper-C8v95nNB.js";import"./keyboard-cFWxPRjW.js";import"./SelectionManager-CkKTCg7Y.js";import"./MenuItem-BT72ym-T.js";import"./IconCaretRight-B5cO70tZ.js";import"./elements-BOYmskOL.js";import"./Trigger-D-XxAhYv.js";import"./IconCaretDown-cvqhZz-x.js";import"./IconCaretDown16-GiF-mGuT.js";import"./IconTrashBin16-C1hGhQPA.js";import"./IconTrashBin24-T3d59XsQ.js";import"./EnablePortalWrapper-D2WWcRo-.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
