import{r as n,j as y}from"./iframe-O6Xb67gi.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-DO3aoKBT.js";import"./preload-helper-DpV-BRze.js";import"./SegmentedControls-DbEbEtrf.js";import"./useFocusRing-CHeGnMQA.js";import"./useEffectEvent-DTA_MKoh.js";import"./useFocusable-CIKgwDH6.js";import"./chain-CQUeJXJW.js";import"./index-CQ6zbiUp.js";import"./useFormValidationState-DWOowmKC.js";import"./FocusScope--mUmRhU_.js";import"./useField-CsabfYa2.js";import"./useLabels-BSIpPAgP.js";import"./context-ByKPL08u.js";import"./VisuallyHidden-B2p5YlCX.js";import"./useControlledState-Bqg_pIq_.js";import"./useMemoizedId-DoJPVw-z.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CqcG56f5.js";import"./TextInput-CfBurs0_.js";import"./LoadingCircle-BypHdLvW.js";import"./IconCheckMark-CKGB0Mef.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BxWaSX4m.js";import"./IconExclamationMarkTriangle-C1H0ir6P.js";import"./IconExclamationMarkTriangle24-DYPgUd-A.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-Bv0XhaDP.js";import"./useLink-BbG6K7ZD.js";import"./usePopper-DUNlXtjr.js";import"./index-B9jSwJHi.js";import"./Button-fwlsdqhf.js";import"./useButton-D5BwoBXI.js";import"./Portal-D436pgRI.js";import"./IconExclamationMarkCircle24-1lif7gA0.js";import"./IconMagnifier-Dt3-BETm.js";import"./IconMagnifier16-ClVja-ud.js";import"./index-uSNE_GCA.js";import"./Dropdown-DkJ1LQLr.js";import"./useOverlayTriggerState-C-z83KL3.js";import"./useMenuTrigger-BdgnVO0V.js";import"./useLocalizedStringFormatter-Cz4luPbj.js";import"./helper-DUvrElbv.js";import"./keyboard-B1J9S0AG.js";import"./SelectionManager-bbMc2UWc.js";import"./MenuItem-DBzSyDfl.js";import"./IconCaretRight-C-Bl03aw.js";import"./elements-BOYmskOL.js";import"./Trigger-DPZTu-hN.js";import"./IconCaretDown-CbXQpFjn.js";import"./IconCaretDown16-spw0sC6J.js";import"./IconTrashBin16-DBuvi8VI.js";import"./IconTrashBin24-1mHVIMfW.js";import"./EnablePortalWrapper-D4p2tHkH.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
