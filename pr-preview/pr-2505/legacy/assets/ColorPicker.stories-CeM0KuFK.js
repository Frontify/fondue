import{r as n,j as y}from"./iframe-DeWR3bCY.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-zgb9U5kL.js";import"./preload-helper-DpV-BRze.js";import"./SegmentedControls-Cj_nH3f6.js";import"./useFocusRing-DDmCmTBg.js";import"./useEffectEvent-ZViW6iRT.js";import"./useFocusable-B__8DITY.js";import"./chain-CphVvTE2.js";import"./index-DJft0qVE.js";import"./useFormValidationState-2PJptteT.js";import"./FocusScope-Dif5VvJH.js";import"./useField-C3SJ3mBh.js";import"./useLabels-Cu2ZzDaC.js";import"./context-BOJIDB7V.js";import"./VisuallyHidden-CfiWE1Ci.js";import"./useControlledState-GBhUF9az.js";import"./useMemoizedId-Dn8dI9Es.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-BXymqf_E.js";import"./TextInput-OgjAFddC.js";import"./LoadingCircle-D_DR5JcS.js";import"./IconCheckMark-CXzdR80S.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-DzJAACQt.js";import"./IconExclamationMarkTriangle-B_pFvKyE.js";import"./IconExclamationMarkTriangle24-W3C7A4ds.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-D44E3v73.js";import"./useLink-BOrznN4e.js";import"./usePopper-CE9IDH84.js";import"./index-BpjCltCh.js";import"./Button-BLweziEU.js";import"./useButton-BZC89rr_.js";import"./Portal-zj59SWKM.js";import"./IconExclamationMarkCircle24-i1KiRCfY.js";import"./IconMagnifier-Cf-q9ERZ.js";import"./IconMagnifier16-Le24KMgs.js";import"./index-GvFwCGDc.js";import"./Dropdown-CYpfTBYq.js";import"./useOverlayTriggerState-ywyvSA7t.js";import"./useMenuTrigger-DESBkAm1.js";import"./useLocalizedStringFormatter-BBIdTXv8.js";import"./helper-DfIq2fiO.js";import"./keyboard-CXV20XOa.js";import"./SelectionManager-BCIaExr_.js";import"./MenuItem-_PWawIWa.js";import"./IconCaretRight-an_YPNZC.js";import"./elements-BOYmskOL.js";import"./Trigger-CN_JTlBu.js";import"./IconCaretDown-D5f-fXwU.js";import"./IconCaretDown16-O9eJ0HMS.js";import"./IconTrashBin16-Hx2dZQ9J.js";import"./IconTrashBin24-hE8LGw7s.js";import"./EnablePortalWrapper-BnKNRUvW.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
