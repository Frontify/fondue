import{r as n,j as y}from"./iframe-CHTDhBOw.js";import{V as s}from"./validation-C9S5KgfE.js";import{L as m}from"./LegacyTextarea-BqWWfo79.js";import"./preload-helper-DpV-BRze.js";import"./useFocusRing-B9ljnzvU.js";import"./useEffectEvent-C_zZUYtw.js";import"./react-textarea-autosize.browser.esm-BFlcCj8H.js";import"./LoadingCircle-CH8flQ6d.js";import"./merge-DI-veSMP.js";import"./IconExclamationMarkTriangle-mlvDeGrH.js";import"./IconSize-BcCrF_mi.js";import"./IconExclamationMarkTriangle24-C2n0SPiZ.js";import"./useMemoizedId-BEUTTPGp.js";import"./focusStyle-Ch_WJ4aJ.js";const O={title:"Deprecated/LegacyTextarea",component:m,tags:["autodocs"],args:{disabled:!1,required:!1,autosize:!1,resizeable:!0,selectable:!1,validation:s.Default,focusOnMount:!1},argTypes:{value:{type:"string"},placeholder:{type:"string"},decorator:{type:"string"},onInput:{action:"onInput"},onBlur:{action:"onBlur"},onClear:{action:"onClear"},onFocus:{action:"onFocus"},validation:{options:Object.values(s),control:{type:"select"}},minRows:{type:"number"},maxRows:{type:"number"},onEnterPressed:{action:"onEnterPressed",table:{disable:!0}},focusOnMount:{type:"boolean"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Textarea component](/docs/current_components-textarea--documentation) instead."}}}},e=a=>{const[l,r]=n.useState("");return n.useEffect(()=>r(`${a.value??""}`),[a.value]),y.jsx(m,{...a,value:l,onInput:r})},t=e.bind({});t.args={focusOnMount:!0};e.__docgenInfo={description:"",methods:[],displayName:"LegacyTextarea",props:{id:{required:!1,tsType:{name:"string"},description:""},value:{required:!1,tsType:{name:"string"},description:""},required:{required:!1,tsType:{name:"boolean"},description:""},decorator:{required:!1,tsType:{name:"ReactNode"},description:""},placeholder:{required:!1,tsType:{name:"string"},description:""},disabled:{required:!1,tsType:{name:"boolean"},description:""},onInput:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: string) => void",signature:{arguments:[{type:{name:"string"},name:"value"}],return:{name:"void"}}},description:""},onBlur:{required:!1,tsType:{name:"signature",type:"function",raw:"(value: string) => void",signature:{arguments:[{type:{name:"string"},name:"value"}],return:{name:"void"}}},description:""},onFocus:{required:!1,tsType:{name:"signature",type:"function",raw:"(e: FocusEvent<HTMLTextAreaElement>) => void",signature:{arguments:[{type:{name:"FocusEvent",elements:[{name:"HTMLTextAreaElement"}],raw:"FocusEvent<HTMLTextAreaElement>"},name:"e"}],return:{name:"void"}}},description:""},validation:{required:!1,tsType:{name:"Validation"},description:""},minRows:{required:!1,tsType:{name:"number"},description:"When autosize if false, this is used as 'rows' property for standard textarea"},maxRows:{required:!1,tsType:{name:"number"},description:"When autosize if false, this property is ignored"},autosize:{required:!1,tsType:{name:"boolean"},description:""},resizeable:{required:!1,tsType:{name:"boolean"},description:""},selectable:{required:!1,tsType:{name:"boolean"},description:""},focusOnMount:{required:!1,tsType:{name:"boolean"},description:""},onEnterPressed:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: KeyboardEvent<HTMLTextAreaElement>) => void",signature:{arguments:[{type:{name:"KeyboardEvent",elements:[{name:"HTMLTextAreaElement"}],raw:"KeyboardEvent<HTMLTextAreaElement>"},name:"event"}],return:{name:"void"}}},description:""}}};var o,i,u;e.parameters={...e.parameters,docs:{...(o=e.parameters)==null?void 0:o.docs,source:{originalSource:`(args: LegacyTextareaProps) => {
  const [input, setInput] = useState('');
  useEffect(() => setInput(\`\${args.value ?? ''}\`), [args.value]);
  return <TextareaComponent {...args} value={input} onInput={setInput} />;
}`,...(u=(i=e.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var p,c,d;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`(args: LegacyTextareaProps) => {
  const [input, setInput] = useState('');
  useEffect(() => setInput(\`\${args.value ?? ''}\`), [args.value]);
  return <TextareaComponent {...args} value={input} onInput={setInput} />;
}`,...(d=(c=t.parameters)==null?void 0:c.docs)==null?void 0:d.source}}};const z=["LegacyTextarea","FocusOnMount"];export{t as FocusOnMount,e as LegacyTextarea,z as __namedExportsOrder,O as default};
