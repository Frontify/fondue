import{r as n,j as y}from"./iframe-Cks-88o9.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-BZhzj08b.js";import"./preload-helper-BS1Me9kX.js";import"./SegmentedControls-BVdm956K.js";import"./useFocusRing-C8sWiUJU.js";import"./useEffectEvent-BNt5WSZx.js";import"./useFocusable--YoiO9-c.js";import"./chain-G5L2sgB7.js";import"./index-DXRHM0Sb.js";import"./useFormValidationState-BqSiXWTU.js";import"./FocusScope-m7u0MRgQ.js";import"./useField-glPgKfsN.js";import"./useLabels-WasTR-ij.js";import"./context-CmmpTty6.js";import"./VisuallyHidden-Cggk39-4.js";import"./useControlledState-DKHXQBOG.js";import"./useMemoizedId-DSfyrAAv.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-Ci4E3beM.js";import"./TextInput-CuOGGe-A.js";import"./LoadingCircle-BlIMHkes.js";import"./IconCheckMark-B9_W7TeU.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-DNFb4cXo.js";import"./IconExclamationMarkTriangle-CTHAx25K.js";import"./IconExclamationMarkTriangle24-IChHUEXC.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-C10DHC2b.js";import"./useLink-Db0Jt4Nh.js";import"./usePopper-Cw61W2iS.js";import"./index-CvMdUDL4.js";import"./Button-ClCmf8ZI.js";import"./useButton-CcsgOnqy.js";import"./Portal-CV9zbekH.js";import"./IconExclamationMarkCircle24-C5vamhQ8.js";import"./IconMagnifier-Cjvpg6AK.js";import"./IconMagnifier16-BcQD-Wog.js";import"./index-CSjgqxyW.js";import"./Dropdown-DD5rMC-n.js";import"./useOverlayTriggerState-BdmA7uSs.js";import"./useMenuTrigger-k3PpRvW2.js";import"./useLocalizedStringFormatter-bTCEnno5.js";import"./helper-CgWvzIOO.js";import"./keyboard-DejAEQ8T.js";import"./SelectionManager-DXpPcbTo.js";import"./MenuItem-4aK2_MVK.js";import"./IconCaretRight-GHj_ttym.js";import"./elements-BOYmskOL.js";import"./Trigger-DGA3CEK-.js";import"./IconCaretDown-CvOY0KLx.js";import"./IconCaretDown16-E7bTcOAW.js";import"./IconTrashBin16-DMwF5qVw.js";import"./IconTrashBin24-DP3RhvPI.js";import"./EnablePortalWrapper-wmCyif0j.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
