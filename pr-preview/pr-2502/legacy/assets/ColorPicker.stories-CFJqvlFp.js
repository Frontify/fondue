import{r as n,j as y}from"./iframe-C7qgvnLT.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-NIjZMDx8.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-CeqBHL9N.js";import"./useFocusRing-ruVidjCk.js";import"./useEffectEvent-DrDM7H6C.js";import"./useFocusable-CnN_ZxTp.js";import"./chain-T2cQnJ1g.js";import"./index-DctR5yPS.js";import"./useFormValidationState-DPXeRUoI.js";import"./FocusScope-B0Alzx6Z.js";import"./useField-DaMcRFd2.js";import"./useLabels-26K3208u.js";import"./context-BKXLBfYD.js";import"./VisuallyHidden-Bwr_fNqq.js";import"./useControlledState-7XsNrzHb.js";import"./useMemoizedId-DEW6DLvp.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-D1W1GYWG.js";import"./TextInput-CGbZopza.js";import"./LoadingCircle-BFXC5BKk.js";import"./IconCheckMark-CgWGsbgX.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-Bh5k4Glw.js";import"./IconExclamationMarkTriangle-Bhhpa-fO.js";import"./IconExclamationMarkTriangle24-DIoh2jOr.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-BAkmaqHw.js";import"./useLink-C0bVM8hx.js";import"./usePopper-ZfvWTzRi.js";import"./index-BDs77OgO.js";import"./Button-DIP-05BK.js";import"./useButton-D3Um7fi_.js";import"./Portal-CaYwSItc.js";import"./IconExclamationMarkCircle24-CkOatguF.js";import"./IconMagnifier-BGVljOn5.js";import"./IconMagnifier16-CiqOoHxs.js";import"./index-p2adJU3a.js";import"./Dropdown-BcmxQNip.js";import"./useOverlayTriggerState-BDvrs8RF.js";import"./useMenuTrigger-gIgvyD0C.js";import"./useLocalizedStringFormatter-CQ_qzty-.js";import"./helper-Dy2DHiDK.js";import"./keyboard-C3rNPdcg.js";import"./SelectionManager-CwTyafBj.js";import"./MenuItem-D96VtoBC.js";import"./IconCaretRight-BgZCG76J.js";import"./elements-BOYmskOL.js";import"./Trigger-Bv5QO50b.js";import"./IconCaretDown-Dr_boQK9.js";import"./IconCaretDown16-Cm-GWNhY.js";import"./IconTrashBin16-BJj675xn.js";import"./IconTrashBin24-XsTDPamP.js";import"./EnablePortalWrapper-gKNJ-13l.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
