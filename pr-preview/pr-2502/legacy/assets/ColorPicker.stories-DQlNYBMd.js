import{r as n,j as y}from"./iframe-D_5TuNwx.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-C6Y6J0dP.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-DfOZRe2Q.js";import"./useFocusRing-B3KMbizV.js";import"./useEffectEvent-GoHBr7KM.js";import"./useFocusable-BzNiBfTe.js";import"./chain-CV2foVe6.js";import"./index-dO3rbIOf.js";import"./useFormValidationState-DY0p0iBe.js";import"./FocusScope-BSq_fjdC.js";import"./useField-DPq9TfXZ.js";import"./useLabels-Aygkof98.js";import"./context-Cl6QxAFA.js";import"./VisuallyHidden-C1dlTP_A.js";import"./useControlledState-Sq5oX11m.js";import"./useMemoizedId-CYiKP5GT.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-oKV_19Jp.js";import"./TextInput-TlmumXUy.js";import"./LoadingCircle-BqbImI04.js";import"./IconCheckMark-hk6yku9m.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BckwQdjd.js";import"./IconExclamationMarkTriangle-dqjw2tRY.js";import"./IconExclamationMarkTriangle24-BOj0eFqi.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-BD5siulQ.js";import"./useLink-B-AN_u2l.js";import"./usePopper-DuQU1gy7.js";import"./index-DNWoq7AN.js";import"./Button-BjKHn-lP.js";import"./useButton-DcDZTOn2.js";import"./Portal-BVeSg7mV.js";import"./IconExclamationMarkCircle24-w9gKnvCo.js";import"./IconMagnifier-Ha2L7CYQ.js";import"./IconMagnifier16-5DHkkrJp.js";import"./index-CUQqsZz3.js";import"./Dropdown-B7AxYWqP.js";import"./useOverlayTriggerState-DguovNuv.js";import"./useMenuTrigger-DxAqJle0.js";import"./useLocalizedStringFormatter-Bh67eRqg.js";import"./helper-a1AM3cjG.js";import"./keyboard-BhxEkJXA.js";import"./SelectionManager-BEWxKx1d.js";import"./MenuItem-DLavnL_P.js";import"./IconCaretRight-C9ywhD4f.js";import"./elements-BOYmskOL.js";import"./Trigger-Dv_fKy-j.js";import"./IconCaretDown-CSPuPiJU.js";import"./IconCaretDown16-B0_VE3Tl.js";import"./IconTrashBin16-DD5bMYOn.js";import"./IconTrashBin24-BmlK7b1q.js";import"./EnablePortalWrapper-koaqxQrZ.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
