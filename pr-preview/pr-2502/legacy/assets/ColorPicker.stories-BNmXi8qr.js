import{r as n,j as y}from"./iframe-MoBs3oke.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-7zKzbivZ.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-Cfp3qOo4.js";import"./useFocusRing-2zpbRi_h.js";import"./useEffectEvent-B10gOIRQ.js";import"./useFocusable-CXK0fL0G.js";import"./chain-bxVqvEcS.js";import"./index-XNeqmIYg.js";import"./useFormValidationState-iA7Vh-Q-.js";import"./FocusScope-AHMkJDTf.js";import"./useField-URXo4TDX.js";import"./useLabels-DVbtlKZe.js";import"./context-DuKYVhKu.js";import"./VisuallyHidden-DQNXk2fv.js";import"./useControlledState-BMEIdEBn.js";import"./useMemoizedId-IOJoatZ5.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CkQFtSWL.js";import"./TextInput-Yo756f2e.js";import"./LoadingCircle-CeR8qJR0.js";import"./IconCheckMark-Dq94ZI-W.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-Drpj3pyS.js";import"./IconExclamationMarkTriangle-Q8ertc4w.js";import"./IconExclamationMarkTriangle24-B9dRqTTK.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip--XkvheMY.js";import"./useLink-BCZ4_2_m.js";import"./usePopper-BG1lwv8D.js";import"./index-DaGbxSuI.js";import"./Button-CHSQ5G04.js";import"./useButton-C5tY8d-2.js";import"./Portal-DqGP2ziF.js";import"./IconExclamationMarkCircle24-sI7DpcuD.js";import"./IconMagnifier-BjN6u_aa.js";import"./IconMagnifier16-DlGc_4O2.js";import"./index-DTcJNs--.js";import"./Dropdown-BZzjCJXd.js";import"./useOverlayTriggerState-CBCaqV4y.js";import"./useMenuTrigger-Cfg04eQV.js";import"./useLocalizedStringFormatter-CkHgGyi4.js";import"./helper-BqzIPBnA.js";import"./keyboard-Bh-3d-67.js";import"./SelectionManager-BeylGFv3.js";import"./MenuItem-DHR5LbTg.js";import"./IconCaretRight-BNCvjaUk.js";import"./elements-BOYmskOL.js";import"./Trigger-CtQV1a50.js";import"./IconCaretDown-KuloZ5wo.js";import"./IconCaretDown16-Bd0YWETo.js";import"./IconTrashBin16-DW5TDvsW.js";import"./IconTrashBin24-M6xuWU20.js";import"./EnablePortalWrapper-qB3CI-P9.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
