import{r as n,j as y}from"./iframe-BeiBdUkj.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-B-3eqtOo.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-UYkdnyIT.js";import"./useFocusRing-tD2j4ccM.js";import"./useEffectEvent-CUg9NzP8.js";import"./useFocusable-K9RKW1xo.js";import"./chain-BnPfELDY.js";import"./index-C_AqB298.js";import"./useFormValidationState-D0TvgF4I.js";import"./FocusScope-CS98epmD.js";import"./useField-DBj69_Au.js";import"./useLabels-DMA130Zm.js";import"./context-BkKxqF86.js";import"./VisuallyHidden-CmL8xA_l.js";import"./useControlledState-e5mXcIGU.js";import"./useMemoizedId-DpnrngAE.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CIugbCVY.js";import"./TextInput-DwAUnCKi.js";import"./LoadingCircle-yqG1DmvY.js";import"./IconCheckMark-DjE8xlPN.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BKyvJ37_.js";import"./IconExclamationMarkTriangle-DYfoTdmg.js";import"./IconExclamationMarkTriangle24-z_nTLkhR.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-3hRALyjK.js";import"./useLink-BDEcosNp.js";import"./usePopper-BHsjRDQS.js";import"./index-P2pbIT9A.js";import"./Button-CEdhFolC.js";import"./useButton-Bfzzcqg5.js";import"./Portal-10ds-kWa.js";import"./IconExclamationMarkCircle24-C6BOKAZO.js";import"./IconMagnifier-BXv0EE7K.js";import"./IconMagnifier16-CV6s3cOF.js";import"./index-Cup0bFLH.js";import"./Dropdown-znR8w-es.js";import"./useOverlayTriggerState-B2WpsBwh.js";import"./useMenuTrigger-CBqvAShD.js";import"./useLocalizedStringFormatter-BuVKGB6Y.js";import"./helper-Bv-L1EkR.js";import"./keyboard-DvH45MmN.js";import"./SelectionManager-BIBLwrll.js";import"./MenuItem-DwzdpEkg.js";import"./IconCaretRight--AaGF9H6.js";import"./elements-BOYmskOL.js";import"./Trigger-CQJ-KRCh.js";import"./IconCaretDown-D2fVss54.js";import"./IconCaretDown16-BYmYdSpW.js";import"./IconTrashBin16-DOVdY3iW.js";import"./IconTrashBin24-lRo4ZEPa.js";import"./EnablePortalWrapper-BTQthFT8.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
