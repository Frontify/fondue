import{r as n,j as y}from"./iframe-DRxQCg9a.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-Pm90wRxm.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-B4YlIVqE.js";import"./useFocusRing-CDuBllxv.js";import"./useEffectEvent-C11MyYjR.js";import"./useFocusable-8O9dnkeU.js";import"./chain-DLnWFCho.js";import"./index-C2BXy0YL.js";import"./useFormValidationState-lbdngbA6.js";import"./FocusScope-CwQeageT.js";import"./useField-y5nUBnSJ.js";import"./useLabels-UTth6uBt.js";import"./context-Cj55ittC.js";import"./VisuallyHidden-BSLSfjbm.js";import"./useControlledState-cCHdfjOT.js";import"./useMemoizedId-BmgNnHm6.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-F-Q40Gv5.js";import"./TextInput-BWQ3LRqh.js";import"./LoadingCircle-DkrT1Noy.js";import"./IconCheckMark-xBz8T-9Q.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-CCD_lv3H.js";import"./IconExclamationMarkTriangle-DQQrK4m0.js";import"./IconExclamationMarkTriangle24-DQmQMI4I.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-D7uYac6s.js";import"./useLink-CpQXiALR.js";import"./usePopper-BOynIysI.js";import"./index-CM4_PlpL.js";import"./Button-CIxnSoQq.js";import"./useButton-CaY_ggp1.js";import"./Portal--C5krueF.js";import"./IconExclamationMarkCircle24-RPPdBWQ5.js";import"./IconMagnifier-Bi60aXQo.js";import"./IconMagnifier16-DbWu6x-u.js";import"./index-DGQhRjAt.js";import"./Dropdown-CRdYMpd_.js";import"./useOverlayTriggerState-Bdq3eJt6.js";import"./useMenuTrigger-uDrIijYN.js";import"./useLocalizedStringFormatter-C9FWFFba.js";import"./helper-BnRo7ufG.js";import"./keyboard-hac42aRL.js";import"./SelectionManager-D6x3Atsq.js";import"./MenuItem-dZdh6zgj.js";import"./IconCaretRight-pj9xawi3.js";import"./elements-BOYmskOL.js";import"./Trigger-BvzyPAiG.js";import"./IconCaretDown-DOhmlA2B.js";import"./IconCaretDown16-BbBeLNn5.js";import"./IconTrashBin16-CP9Rrin5.js";import"./IconTrashBin24-BPAKLzTa.js";import"./EnablePortalWrapper-CxFCl6rm.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
