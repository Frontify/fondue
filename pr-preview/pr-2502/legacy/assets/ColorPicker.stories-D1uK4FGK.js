import{r as n,j as y}from"./iframe-CfLhI7P0.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-klAgreNh.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-C4C2KbWN.js";import"./useFocusRing-c6u9Vcjk.js";import"./useEffectEvent-DgjNhOdj.js";import"./useFocusable-DqnO4tDK.js";import"./chain-C2bpwpa8.js";import"./index-CNTxu6fp.js";import"./useFormValidationState-Dii868hQ.js";import"./FocusScope-Ci5ycIsU.js";import"./useField-pWbNefD1.js";import"./useLabels-C5VNH8gT.js";import"./context-CFy5Jnbr.js";import"./VisuallyHidden-BrtBoVFd.js";import"./useControlledState-CikZhwQf.js";import"./useMemoizedId-DO6EWKyA.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CWw6kW7f.js";import"./TextInput-CSebAqb7.js";import"./LoadingCircle-DTujLDLf.js";import"./IconCheckMark-Bvx1Okuv.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-VvQFK0HB.js";import"./IconExclamationMarkTriangle-DumzWRNf.js";import"./IconExclamationMarkTriangle24-BQCI9tlF.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-69ja691T.js";import"./useLink-tlq5fiSd.js";import"./usePopper-BDJCEm0e.js";import"./index-BXHlWwjT.js";import"./Button-BoqHsuHZ.js";import"./useButton-CafHKOqV.js";import"./Portal-Bzui0qVf.js";import"./IconExclamationMarkCircle24-BD4txlzy.js";import"./IconMagnifier-Hz53lENs.js";import"./IconMagnifier16-CVQ5T8wB.js";import"./index-D4zvZOZu.js";import"./Dropdown-CVUPTM-k.js";import"./useOverlayTriggerState-CFYEaNmX.js";import"./useMenuTrigger-Ddxx7kXJ.js";import"./useLocalizedStringFormatter-BY0SNe9w.js";import"./helper-D-lWvwnP.js";import"./keyboard-BcVSFiEu.js";import"./SelectionManager-B5h8l_Gt.js";import"./MenuItem-CDWDwpry.js";import"./IconCaretRight-BbFToOJp.js";import"./elements-BOYmskOL.js";import"./Trigger-P2NWPnIL.js";import"./IconCaretDown-ip8hOLG9.js";import"./IconCaretDown16-0kUT5ueY.js";import"./IconTrashBin16-Vihvm3Ba.js";import"./IconTrashBin24-Do203-AB.js";import"./EnablePortalWrapper-BAwlIUsk.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
