import{r as n,j as y}from"./iframe-C4oRDf00.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-Bc_0hl4D.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-eJ2c8Dfb.js";import"./useFocusRing-Cfoq8wro.js";import"./useEffectEvent-vTlljP4j.js";import"./useFocusable-DaMtZN9H.js";import"./chain-BFYyGSXr.js";import"./index-C2GFe8M8.js";import"./useFormValidationState-BFKh7Upf.js";import"./FocusScope-DQFEHFLy.js";import"./useField-CY0QFutb.js";import"./useLabels-CbM2_Ixf.js";import"./context-BcRBNBSY.js";import"./VisuallyHidden-Bj5e8_W7.js";import"./useControlledState-Dt4aAtWN.js";import"./useMemoizedId-A1bQAbDX.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CH4dkw2b.js";import"./TextInput-YBFtltCu.js";import"./LoadingCircle-D7ecF-OQ.js";import"./IconCheckMark-CdXL73bS.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-CGngu9gm.js";import"./IconExclamationMarkTriangle-CyysmFxL.js";import"./IconExclamationMarkTriangle24-B9Jh6rAf.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-DIWZRn-L.js";import"./useLink-CAaZ-YI_.js";import"./usePopper-oEgZSIdK.js";import"./index-pkMoDo0F.js";import"./Button-PWCBVfYK.js";import"./useButton-Y6cWZoe9.js";import"./Portal-Ca2NGuOZ.js";import"./IconExclamationMarkCircle24-BU0c1aoh.js";import"./IconMagnifier-DojcWBYx.js";import"./IconMagnifier16-cHNxY7RG.js";import"./index-DvNhm2qa.js";import"./Dropdown-DUWRUVei.js";import"./useOverlayTriggerState-L7vIiDuI.js";import"./useMenuTrigger-BVyRaPKJ.js";import"./useLocalizedStringFormatter-blnl1i68.js";import"./helper-IakdE2XA.js";import"./keyboard-CyR-BIXM.js";import"./SelectionManager-D4_ZQnS-.js";import"./MenuItem-ICxexfNS.js";import"./IconCaretRight-Boy6Hij2.js";import"./elements-BOYmskOL.js";import"./Trigger-wHjcz8EF.js";import"./IconCaretDown-B7rtaYOu.js";import"./IconCaretDown16-B36G00fo.js";import"./IconTrashBin16-BH2hEHIY.js";import"./IconTrashBin24-DvFCY5K4.js";import"./EnablePortalWrapper-BJveQmLF.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
