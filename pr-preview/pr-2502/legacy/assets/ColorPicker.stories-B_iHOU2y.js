import{r as n,j as y}from"./iframe-D2yG1z8G.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-C8tWWbGA.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-CnfJYKJM.js";import"./useFocusRing-CUPlW5s2.js";import"./useEffectEvent-BWMeWV83.js";import"./useFocusable-CG5e2_ae.js";import"./chain-DIy-ezxT.js";import"./index-DOTWLTGL.js";import"./useFormValidationState-Bmf10aOQ.js";import"./FocusScope-1bsShcHu.js";import"./useField-BsC29XRJ.js";import"./useLabels-DAtvhxnB.js";import"./context-BU5B6cvx.js";import"./VisuallyHidden-BTtvw17p.js";import"./useControlledState-CQCIWO7H.js";import"./useMemoizedId-Nwa-rf0T.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-00WTk6IN.js";import"./TextInput-DSHnXubY.js";import"./LoadingCircle-AiTfB69Q.js";import"./IconCheckMark-DEoILCsa.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BPtP3osG.js";import"./IconExclamationMarkTriangle-LCwcPvTX.js";import"./IconExclamationMarkTriangle24-DmNRqQJY.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-Bza-CyWY.js";import"./useLink-B4iVauNq.js";import"./usePopper-B1ucurC2.js";import"./index-BRHXjPQc.js";import"./Button-DyZJdRzC.js";import"./useButton-BoO6ZY0i.js";import"./Portal-CUyHPEXT.js";import"./IconExclamationMarkCircle24-D4bTeovh.js";import"./IconMagnifier-Leuvw12o.js";import"./IconMagnifier16-DrQlrkHj.js";import"./index-DlDj5p3i.js";import"./Dropdown-CFk6mu3D.js";import"./useOverlayTriggerState-rLtFCX4j.js";import"./useMenuTrigger-DWy_hfiV.js";import"./useLocalizedStringFormatter-SrIy3I1Q.js";import"./helper-DfGv69Qi.js";import"./keyboard-DPy4bkS-.js";import"./SelectionManager-BudR9t70.js";import"./MenuItem-BA_d6BRa.js";import"./IconCaretRight-BLryYbA6.js";import"./elements-BOYmskOL.js";import"./Trigger-B9HV8M2g.js";import"./IconCaretDown-DAlyAeDs.js";import"./IconCaretDown16-LfI1PUaG.js";import"./IconTrashBin16-0ahnzJRY.js";import"./IconTrashBin24-CaSAfRi-.js";import"./EnablePortalWrapper-BhbHE_zt.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
