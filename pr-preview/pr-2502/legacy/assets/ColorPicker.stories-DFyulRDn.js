import{r as n,j as y}from"./iframe-BZNqkfAJ.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-BeC4cJTQ.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-BhyMocwz.js";import"./useFocusRing-CQ3DSYMp.js";import"./useEffectEvent-rvbS5oZD.js";import"./useFocusable-Cbb67iIG.js";import"./chain-DYaMBwaU.js";import"./index-CwejX9uB.js";import"./useFormValidationState-DUZiTwZ3.js";import"./FocusScope-VO-zr9xq.js";import"./useField-Dncir8NR.js";import"./useLabels-DrGW_rst.js";import"./context-DzL1VuB-.js";import"./VisuallyHidden-A-_B2Ho-.js";import"./useControlledState-CV4BoZNv.js";import"./useMemoizedId-DhdJoYsE.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CkruVGRp.js";import"./TextInput-DX08Yz5d.js";import"./LoadingCircle-DAKrD1ew.js";import"./IconCheckMark-DHJw-dqm.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-B1GSSqi0.js";import"./IconExclamationMarkTriangle-BmGuHDO2.js";import"./IconExclamationMarkTriangle24-B3UsieTF.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-BMPA2y4M.js";import"./useLink-BV60aH2t.js";import"./usePopper-RQB8ULWN.js";import"./index-CfLIqIuw.js";import"./Button-DPdntTPA.js";import"./useButton-6CMglOI-.js";import"./Portal-ClW_Qzmp.js";import"./IconExclamationMarkCircle24-C_PyDBL-.js";import"./IconMagnifier-D4urqMkf.js";import"./IconMagnifier16-QMB3tNuA.js";import"./index-B-v6MYGZ.js";import"./Dropdown-CoIAYJye.js";import"./useOverlayTriggerState-Dzg488Go.js";import"./useMenuTrigger-CrK8tKDb.js";import"./useLocalizedStringFormatter-qpKxI0nK.js";import"./helper-dgbsuSzK.js";import"./keyboard-dAigOSBL.js";import"./SelectionManager-DIVIBHA5.js";import"./MenuItem-XgRfKuys.js";import"./IconCaretRight-ClZLl1Vb.js";import"./elements-BOYmskOL.js";import"./Trigger-J-Ueq0ak.js";import"./IconCaretDown-Go_qsiNK.js";import"./IconCaretDown16-BhAd_BS-.js";import"./IconTrashBin16-DaODlkmx.js";import"./IconTrashBin24-BVAu-Gg4.js";import"./EnablePortalWrapper-mkrX-ke8.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
