import{r as n,j as y}from"./iframe-DZsoqIQH.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-E638-T9O.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-B_Qno3Eg.js";import"./useFocusRing-DbKjnAj0.js";import"./useEffectEvent-D8w6sK6J.js";import"./useFocusable-w9vBw5vf.js";import"./chain-VSjaRpoC.js";import"./index-B1yy6L_0.js";import"./useFormValidationState-C1K-Mz5X.js";import"./FocusScope-5PS4yzDg.js";import"./useField-DAybmCmX.js";import"./useLabels-CZmjsJXW.js";import"./context-B75mfuj9.js";import"./VisuallyHidden-BYSkxBuO.js";import"./useControlledState-B-ig0Kl3.js";import"./useMemoizedId-Bl8d1xLN.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-BZB0M0Hi.js";import"./TextInput-BsRYT8lu.js";import"./LoadingCircle-fy3UZfJY.js";import"./IconCheckMark-BHBJzH8F.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-DPfWkxZJ.js";import"./IconExclamationMarkTriangle-BqNXwrRl.js";import"./IconExclamationMarkTriangle24-C0GN7WvG.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-ClEwPHV5.js";import"./useLink-xEXBuUvC.js";import"./usePopper-BgKvnTxb.js";import"./index-Bz3rgcYf.js";import"./Button-DjeFZAKL.js";import"./useButton-BxuZFr2v.js";import"./Portal-CN1TagRk.js";import"./IconExclamationMarkCircle24-DDwDRcD9.js";import"./IconMagnifier-yEhqrV-X.js";import"./IconMagnifier16-BLo5wA22.js";import"./index-Bjp0ObHm.js";import"./Dropdown-HywWKjfH.js";import"./useOverlayTriggerState-CrUZ6bBT.js";import"./useMenuTrigger-D4B5Ea0R.js";import"./useLocalizedStringFormatter-BCvMjn9u.js";import"./helper-DNoz36tr.js";import"./keyboard-B6gXpxeA.js";import"./SelectionManager-VHu7rD93.js";import"./MenuItem-Tra8RLYf.js";import"./IconCaretRight-yQdL4g0O.js";import"./elements-BOYmskOL.js";import"./Trigger-BC-kZGBQ.js";import"./IconCaretDown-DmwJmvvT.js";import"./IconCaretDown16-Dvjt7Ada.js";import"./IconTrashBin16-kjeqw6-L.js";import"./IconTrashBin24-DN5n-TpR.js";import"./EnablePortalWrapper-DBbHCB_v.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
