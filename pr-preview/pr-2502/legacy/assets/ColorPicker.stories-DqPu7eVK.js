import{r as n,j as y}from"./iframe-CLWR3nUG.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-Bez7X0Sc.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-BKqRF-ZC.js";import"./useFocusRing-BSAt-4Vk.js";import"./useEffectEvent-CAs0gB5n.js";import"./useFocusable-DqLL_9nB.js";import"./chain-BXOE_HCM.js";import"./index-B_9kxJ6p.js";import"./useFormValidationState-DsxgvnBE.js";import"./FocusScope-BqKd6BB4.js";import"./useField-kYwedNDJ.js";import"./useLabels-B9PzIB3R.js";import"./context-v0LEZ9V1.js";import"./VisuallyHidden-C8aD6iZq.js";import"./useControlledState-Bgj_pg2k.js";import"./useMemoizedId-nabCRXrC.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-BU611xik.js";import"./TextInput-G_lGNFDI.js";import"./LoadingCircle-DTZpP-I5.js";import"./IconCheckMark-Dpv-CvL4.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-XzksfC__.js";import"./IconExclamationMarkTriangle-znDU4MK2.js";import"./IconExclamationMarkTriangle24-zD4-cjbh.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-BxpYtXmg.js";import"./useLink-PH1jH_sQ.js";import"./usePopper-BaDtouo_.js";import"./index-D3ZbXnsu.js";import"./Button-BXJ3LDeK.js";import"./useButton--zqKr1UY.js";import"./Portal-BdiWRCVg.js";import"./IconExclamationMarkCircle24-ClOhu_Ri.js";import"./IconMagnifier-B5Co7YNa.js";import"./IconMagnifier16-DdG0vbyB.js";import"./index-DLd59pl0.js";import"./Dropdown-CgJKgsG5.js";import"./useOverlayTriggerState-DtfrjgdL.js";import"./useMenuTrigger-CQA0Zlhk.js";import"./useLocalizedStringFormatter-DltMrR-Y.js";import"./helper-BVjiVm4-.js";import"./keyboard-DiUzdOAm.js";import"./SelectionManager-DYagDv8k.js";import"./MenuItem-BLMEyQkG.js";import"./IconCaretRight-D_vXqUpq.js";import"./elements-BOYmskOL.js";import"./Trigger-DN5iHf_G.js";import"./IconCaretDown-KLV270_U.js";import"./IconCaretDown16-b6UFvhxi.js";import"./IconTrashBin16-DR4mHbxD.js";import"./IconTrashBin24-Cml_YhRO.js";import"./EnablePortalWrapper-D2eOtS_g.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
