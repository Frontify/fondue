import{r as n,j as y}from"./iframe-BsrH74wW.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-CIIScFSX.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-DHUB14TQ.js";import"./useFocusRing-hWS3vXVU.js";import"./useEffectEvent-BNtJsWpB.js";import"./useFocusable-D4UOYfqs.js";import"./chain-F-BtQllU.js";import"./index-BuHowFQm.js";import"./useFormValidationState-XqvpKhv-.js";import"./FocusScope-D-MiZ49_.js";import"./useField-Dzkf9Z-B.js";import"./useLabels-DykprWij.js";import"./context-WDB9iL2j.js";import"./VisuallyHidden-DoRJ1ABU.js";import"./useControlledState-B5iqGSbV.js";import"./useMemoizedId-JCqlWWiP.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-D1wxvBJp.js";import"./TextInput-B5tiVWeN.js";import"./LoadingCircle-s8Rinl8F.js";import"./IconCheckMark-BonruZ95.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BWIuzEwt.js";import"./IconExclamationMarkTriangle-Bu22p--y.js";import"./IconExclamationMarkTriangle24-D4qPWYL4.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-w6VRqQyz.js";import"./useLink-N5D_jC9v.js";import"./usePopper-D4H62yBu.js";import"./index-BVx1uj1e.js";import"./Button-Ca7IJx5d.js";import"./useButton-PikOkiBX.js";import"./Portal-BJaQAvNu.js";import"./IconExclamationMarkCircle24-onFYI8CK.js";import"./IconMagnifier-Dpz54ZDK.js";import"./IconMagnifier16-TYxX8Bk1.js";import"./index-CibrXaC5.js";import"./Dropdown-vrNjwJ4t.js";import"./useOverlayTriggerState-CQObmmI1.js";import"./useMenuTrigger-DHg7FuWy.js";import"./useLocalizedStringFormatter-BnBHXZ2i.js";import"./helper-BASIhnZe.js";import"./keyboard-DY2UNgnm.js";import"./SelectionManager-dybXC34z.js";import"./MenuItem-Dw6fhHFt.js";import"./IconCaretRight-C5TlupxE.js";import"./elements-BOYmskOL.js";import"./Trigger-DYPmnBhX.js";import"./IconCaretDown-ClCIJDke.js";import"./IconCaretDown16-V3Dju6dr.js";import"./IconTrashBin16-DlVR9DwO.js";import"./IconTrashBin24-Clf_HqQZ.js";import"./EnablePortalWrapper-IRN-cTF_.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
