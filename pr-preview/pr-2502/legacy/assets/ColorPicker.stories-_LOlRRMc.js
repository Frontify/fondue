import{r as n,j as y}from"./iframe--69LojlF.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-j7a7pvnM.js";import"./preload-helper-B933Jwna.js";import"./SegmentedControls-D3P05q_X.js";import"./useFocusRing-BH1SQdFi.js";import"./useEffectEvent-DhWl9svH.js";import"./useFocusable-BodNpPM4.js";import"./chain-CmGVabf0.js";import"./index-BsfhZMXK.js";import"./useFormValidationState-DztCu01P.js";import"./FocusScope-U5Ti1D4B.js";import"./useField-Bs_Ry8Y4.js";import"./useLabels-Dm0obEyz.js";import"./context-Beq-gevm.js";import"./VisuallyHidden-UXPC12Ib.js";import"./useControlledState-V5TCaj4V.js";import"./useMemoizedId-CMk70fRe.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-maBG6l4_.js";import"./TextInput-DmT2ThMS.js";import"./LoadingCircle-DaUVWZ6h.js";import"./IconCheckMark-AKEbsYWf.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-DR7deBTI.js";import"./IconExclamationMarkTriangle-Cgr4K_Ru.js";import"./IconExclamationMarkTriangle24-Cw9OcO3M.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-B2Ak6Huk.js";import"./useLink-BrmAS8yT.js";import"./usePopper-DDX-rhNz.js";import"./index-unlT50y8.js";import"./Button-BNRsGQyj.js";import"./useButton-DhE5g_3c.js";import"./Portal-Dj_TS6yD.js";import"./IconExclamationMarkCircle24-B4WeW3eA.js";import"./IconMagnifier-CLHtlYKA.js";import"./IconMagnifier16-DGn9XkzB.js";import"./index-CTgRto-L.js";import"./Dropdown-B5i5VEXc.js";import"./useOverlayTriggerState-CQyksHL1.js";import"./useMenuTrigger-BJ8H3XDX.js";import"./useLocalizedStringFormatter-GLs_szLr.js";import"./helper-C_H74kwk.js";import"./keyboard-Bp6v6CcE.js";import"./SelectionManager-DYNh-EBu.js";import"./MenuItem-69O8iPF0.js";import"./IconCaretRight-BzvgvZxS.js";import"./elements-BOYmskOL.js";import"./Trigger-DnHqOUmj.js";import"./IconCaretDown-BBGinBo0.js";import"./IconCaretDown16-ehKqRY46.js";import"./IconTrashBin16-BeHdGc_h.js";import"./IconTrashBin24-C-dh1hWZ.js";import"./EnablePortalWrapper-QZQePgoE.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
