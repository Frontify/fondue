import{j as t}from"./iframe-BGj-8Xma.js";import{T as r}from"./TooltipIcon-C3ABrqlZ.js";import{I as d}from"./LegacyTooltip-D-bnhDRE.js";import{I as u}from"./IconInfo-Bl48tPaB.js";import{I as g}from"./IconQuestionMarkCircle-BnLlupnH.js";import{I as m}from"./InputLabel-DaO4kGGP.js";import"./preload-helper-B933Jwna.js";import"./IconSize-BcCrF_mi.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./useLink-By44ZSEz.js";import"./useFocusable-CknK0IHp.js";import"./useFocusRing-BlnI74c6.js";import"./useEffectEvent-BlEEx4Xd.js";import"./chain-DZoKwBUY.js";import"./index-oNtiiR1K.js";import"./usePopper-DX_Dz00k.js";import"./index-DWLevnU7.js";import"./Button-2EBAcOH_.js";import"./useButton-DphR1AkN.js";import"./Portal-9RvB8Aeb.js";import"./useMemoizedId-HkVr2jVB.js";import"./IconCheckMark-BK0eBuyp.js";import"./IconExclamationMarkCircle24-CmLDFqXY.js";import"./IconExclamationMarkTriangle-9V-82lwc.js";import"./IconExclamationMarkTriangle24-Bicc5sn3.js";const $={title:"Components/Input Label",component:m,tags:["autodocs"],args:{children:"Input Label",disabled:!1,required:!1,tooltip:{content:"Lorem ipsum dolor sit amet."}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Label component](/docs/current_components-label--documentation) instead."}}}},e=c=>t.jsx(m,{...c}),o=e.bind({});o.args={...e.args,tooltip:[{triggerIcon:t.jsx(u,{}),triggerStyle:r.Danger,content:"Tooltip 1"},{triggerIcon:t.jsx(g,{}),triggerStyle:r.Primary,content:"Tooltip 2"},{triggerIcon:t.jsx(d,{filled:!0}),triggerStyle:r.Warning,content:"Tooltip 3"}]};e.__docgenInfo={description:"",methods:[],displayName:"InputLabel",props:{id:{required:!1,tsType:{name:"string"},description:""},htmlFor:{required:!0,tsType:{name:"string"},description:""},required:{required:!1,tsType:{name:"boolean"},description:""},disabled:{required:!1,tsType:{name:"boolean"},description:""},clickable:{required:!1,tsType:{name:"boolean"},description:""},tooltip:{required:!1,tsType:{name:"union",raw:`| (LegacyTooltipProps & Pick<TooltipIconProps, 'triggerStyle' | 'triggerIcon'>)
| (LegacyTooltipProps & Pick<TooltipIconProps, 'triggerStyle' | 'triggerIcon'>)[]`,elements:[{name:"unknown"},{name:"Array",elements:[{name:"unknown"}],raw:"(LegacyTooltipProps & Pick<TooltipIconProps, 'triggerStyle' | 'triggerIcon'>)[]"}]},description:""},bold:{required:!1,tsType:{name:"boolean"},description:""},children:{required:!1,tsType:{name:"ReactNode"},description:""},"data-test-id":{required:!1,tsType:{name:"string"},description:""}}};var i,n,s;e.parameters={...e.parameters,docs:{...(i=e.parameters)==null?void 0:i.docs,source:{originalSource:"(args: InputLabelProps) => <InputLabelComponent {...args} />",...(s=(n=e.parameters)==null?void 0:n.docs)==null?void 0:s.source}}};var p,a,l;o.parameters={...o.parameters,docs:{...(p=o.parameters)==null?void 0:p.docs,source:{originalSource:"(args: InputLabelProps) => <InputLabelComponent {...args} />",...(l=(a=o.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};const v=["InputLabel","InputLabelWithMultipleTooltips"];export{e as InputLabel,o as InputLabelWithMultipleTooltips,v as __namedExportsOrder,$ as default};
