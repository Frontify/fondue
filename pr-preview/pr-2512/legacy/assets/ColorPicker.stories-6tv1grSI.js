import{r as n,j as y}from"./iframe-BJKrgMsT.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-OWqMypg1.js";import"./preload-helper-DqI2Z-E9.js";import"./SegmentedControls-B-sh6tFK.js";import"./useFocusRing-BldqIYxH.js";import"./useEffectEvent-Duvqr8iK.js";import"./useFocusable-D02DpTt5.js";import"./chain-Bvi37PFb.js";import"./index-CdqStL1j.js";import"./useFormValidationState-DyJUC4_W.js";import"./FocusScope-B-KAGppd.js";import"./useField-Dc8Z6_pk.js";import"./useLabels-DWRhYNnw.js";import"./context-CSZdCMpd.js";import"./VisuallyHidden-CGGVwWVM.js";import"./useControlledState-DLTuvT9n.js";import"./useMemoizedId-BvlRzixw.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-B__khGRL.js";import"./TextInput-C_pxFzry.js";import"./LoadingCircle-CQA52sqE.js";import"./IconCheckMark-Cv4GW5R2.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-C9JbtjCK.js";import"./IconExclamationMarkTriangle-sRh5tL4h.js";import"./IconExclamationMarkTriangle24-cPBP4VDB.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-DrbUxBgR.js";import"./useLink-Xttdml0-.js";import"./usePopper-BhBjtLqF.js";import"./index-Dp9pTiFo.js";import"./Button-CjadhTmL.js";import"./useButton-BQITPCv7.js";import"./Portal-DqeH8oQh.js";import"./IconExclamationMarkCircle24-C_fuGlRC.js";import"./IconMagnifier-BwsslcUU.js";import"./IconMagnifier16-B8AgC0RF.js";import"./index-CqUzjMd-.js";import"./Dropdown-C72jdR6-.js";import"./useOverlayTriggerState-CupY0UEd.js";import"./useMenuTrigger-A8LHR02_.js";import"./useLocalizedStringFormatter-CxL0Nsw_.js";import"./helper-3d2TokCW.js";import"./keyboard-DP2_46MZ.js";import"./SelectionManager-BGoUSsb7.js";import"./MenuItem-CyQw2jIH.js";import"./IconCaretRight-I3eE5bdf.js";import"./elements-BOYmskOL.js";import"./Trigger-CgUX9X0E.js";import"./IconCaretDown-_j9u8Nu7.js";import"./IconCaretDown16-DkTG0epS.js";import"./IconTrashBin16-kiad0PgP.js";import"./IconTrashBin24-BmJfcMH0.js";import"./EnablePortalWrapper-D47WanvQ.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
