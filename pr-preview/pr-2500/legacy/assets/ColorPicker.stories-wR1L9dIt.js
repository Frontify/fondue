import{r as n,j as y}from"./iframe-UQ-0H_EQ.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-C4WXcQ3s.js";import"./preload-helper-C9_mj7KT.js";import"./SegmentedControls-CJ2ooM5x.js";import"./useFocusRing-CPN3fKV8.js";import"./useEffectEvent-vUcOvX74.js";import"./useFocusable-K9NgQBjW.js";import"./chain-CzUm7sbH.js";import"./index-fcY41WQ9.js";import"./useFormValidationState-DH0bBYMX.js";import"./FocusScope-CX_7qKJM.js";import"./useField-D2h8_JGA.js";import"./useLabels-pIsm5jB9.js";import"./context-CcN6Mgd4.js";import"./VisuallyHidden-DujC8zG5.js";import"./useControlledState-DyP2h4uz.js";import"./useMemoizedId-cIDGoJqf.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-D9fzmh2o.js";import"./TextInput-BXUiVRYX.js";import"./LoadingCircle-KbYNzLEL.js";import"./IconCheckMark-Lic7jvaJ.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-DTn1rkKH.js";import"./IconExclamationMarkTriangle-K7neV5TM.js";import"./IconExclamationMarkTriangle24-C_rjSlB6.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-D2XRdfzl.js";import"./useLink--dr1hXBz.js";import"./usePopper-DpGtHs7K.js";import"./index-DUo0YOzp.js";import"./Button-P7BIUmCy.js";import"./useButton-CaQcq_VD.js";import"./Portal-B8xjT20O.js";import"./IconExclamationMarkCircle24-CmLZRoRK.js";import"./IconMagnifier-DKBwWfZD.js";import"./IconMagnifier16-kiEEgklu.js";import"./index-B3230K_6.js";import"./Dropdown-Re5gK8tf.js";import"./useOverlayTriggerState-BWlP_pY7.js";import"./useMenuTrigger-uiH_EoDe.js";import"./useLocalizedStringFormatter-Bd-jBhYh.js";import"./helper-B9WpLzaj.js";import"./keyboard-CapSEwjy.js";import"./SelectionManager-pXRWXaqJ.js";import"./MenuItem-BzYX1UN3.js";import"./IconCaretRight-Vm4bcQet.js";import"./elements-BOYmskOL.js";import"./Trigger-mo0TyR9Q.js";import"./IconCaretDown-k67zgOvt.js";import"./IconCaretDown16-Rltc1H2Q.js";import"./IconTrashBin16-By8fAgtB.js";import"./IconTrashBin24-BfKejfxE.js";import"./EnablePortalWrapper-ChMpwNSj.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
