import{r as n,j as y}from"./iframe-AUIfQrP4.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-D4GwmiYH.js";import"./preload-helper-sQDyWCwb.js";import"./SegmentedControls-CXllxcaM.js";import"./useFocusRing-BoSeZWz5.js";import"./useEffectEvent-Bcoupwh6.js";import"./useFocusable-CnizbhnP.js";import"./chain-oFsE9aEj.js";import"./index-BEcmyHTP.js";import"./useFormValidationState-C43Yln6j.js";import"./FocusScope-Ch0sNNKQ.js";import"./useField-CFbP_W3z.js";import"./useLabels--84juFjK.js";import"./context-Cy3OkrWF.js";import"./VisuallyHidden-DuFlpOV3.js";import"./useControlledState-BAllyYje.js";import"./useMemoizedId-Df0mYjrE.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-eea65Ser.js";import"./TextInput-BnZMKyuu.js";import"./LoadingCircle-CxtaYhTg.js";import"./IconCheckMark-B520aOQQ.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-qw3ZfYE1.js";import"./IconExclamationMarkTriangle-gBP2crPl.js";import"./IconExclamationMarkTriangle24-LaFkKa3a.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-DttKv4lK.js";import"./useLink-BENDotdL.js";import"./usePopper-BdKXdpb8.js";import"./index-zrmajsre.js";import"./Button-DlFiAFHP.js";import"./useButton-D0wGE8qM.js";import"./Portal-CCtPellx.js";import"./IconExclamationMarkCircle24-CpDxWh5c.js";import"./IconMagnifier-Di0aMd7c.js";import"./IconMagnifier16-BGepLKUd.js";import"./index-IYZs-q5f.js";import"./Dropdown-C-r4J8l_.js";import"./useOverlayTriggerState-CuK4f_N_.js";import"./useMenuTrigger-B7Fpswne.js";import"./useLocalizedStringFormatter-gnsmCImp.js";import"./helper-5kMBwN-m.js";import"./keyboard-XYTEU8GG.js";import"./SelectionManager-D1hXYaW9.js";import"./MenuItem-ChgvnhCc.js";import"./IconCaretRight-VlGptlRu.js";import"./elements-BOYmskOL.js";import"./Trigger-SlyTZoZ6.js";import"./IconCaretDown-Bj4WZxKG.js";import"./IconCaretDown16-DPOLoDZ8.js";import"./IconTrashBin16-B-qnlzDI.js";import"./IconTrashBin24-cBVJi1WR.js";import"./EnablePortalWrapper-BKs_Z6VZ.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
