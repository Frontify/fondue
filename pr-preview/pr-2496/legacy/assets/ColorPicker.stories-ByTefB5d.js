import{r as n,j as y}from"./iframe-BgYojI_W.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-DL1ikAuN.js";import"./preload-helper-D2dEV7R8.js";import"./SegmentedControls-Z17t6DJB.js";import"./useFocusRing-S1vUz9A3.js";import"./useEffectEvent-CjtgopOr.js";import"./useFocusable-BriU369z.js";import"./chain-CLjZ0rZo.js";import"./index-CW7dYZLD.js";import"./useFormValidationState-BT1k_IQq.js";import"./FocusScope-TIGP6g0W.js";import"./useField-DltNjuGe.js";import"./useLabels-8ySNZcM_.js";import"./context-B9TkMlOs.js";import"./VisuallyHidden-3EM4-RVL.js";import"./useControlledState-Dfox4TSK.js";import"./useMemoizedId-DElFU63U.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CEIYE82H.js";import"./TextInput-DQyO_ikN.js";import"./LoadingCircle-yP6bM4mM.js";import"./IconCheckMark-D8XnL3-x.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BSCCmRlT.js";import"./IconExclamationMarkTriangle-vM5NM8pJ.js";import"./IconExclamationMarkTriangle24-ChN_MsIm.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-DblPyA6F.js";import"./useLink-BnSQ2pha.js";import"./usePopper-C2LFeOXI.js";import"./index-DJQ3JVVA.js";import"./Button-BY43IOw2.js";import"./useButton-BDmytRL6.js";import"./Portal-VEfQ3NaP.js";import"./IconExclamationMarkCircle24-7FcJBMVN.js";import"./IconMagnifier-CVB1rpbh.js";import"./IconMagnifier16-F_y5fPwR.js";import"./index-Cx8yQcsV.js";import"./Dropdown-Dx1k5DVz.js";import"./useOverlayTriggerState-Bvo7VbK9.js";import"./useMenuTrigger-Ct9cTHeR.js";import"./useLocalizedStringFormatter-BE7F-IWb.js";import"./helper-Cvqu7sw9.js";import"./keyboard-CW3j1SfZ.js";import"./SelectionManager-DV1QZpxq.js";import"./MenuItem-CK90v2n3.js";import"./IconCaretRight-DgsYXu0T.js";import"./elements-BOYmskOL.js";import"./Trigger-Cb_BmOID.js";import"./IconCaretDown-iXKI0o7n.js";import"./IconCaretDown16-BixWz1Dj.js";import"./IconTrashBin16-CunjfcQj.js";import"./IconTrashBin24-GzUWZWzQ.js";import"./EnablePortalWrapper-DIXXfq5B.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
