import{j as r}from"./jsx-runtime-BYYWji4R.js";import{S as A}from"./index-CBtKeiPJ.js";import{r as s}from"./index-ClcD9ViR.js";import{C as F}from"./index-BdDBj5DZ.js";import{s as X,f as B,q as P}from"./fondue-icons351-BQd7JGbV.js";import{S as v}from"./Select-C-hcw6wK.js";import{T as i}from"./TextInput-BMXgjx1j.js";const S="_root_6n5w5_4",$="_inputs_6n5w5_12",D="_colorFormatInput_6n5w5_23",O="_colorAlphaInput_6n5w5_24",L="_colorChannelInputGroup_6n5w5_28",M="_inputDecorator_6n5w5_39",z="_gradientInput_6n5w5_43",W="_reactColorful_6n5w5_46",U="_valueInput_6n5w5_50",o={root:S,inputs:$,colorFormatInput:D,colorAlphaInput:O,colorChannelInputGroup:L,inputDecorator:M,gradientInput:z,reactColorful:W,valueInput:U},q={red:255,green:255,blue:255,alpha:1,name:""},R="HEX",J=e=>{if(e)return`rgba(${e.red}, ${e.green}, ${e.blue}, ${e.alpha??1})`},x=e=>{const a=/^([\dA-Fa-f]{3}){1,2}$/;return e.length>2&&a.test(e)},K=e=>{const a=/^([\dA-Fa-f]{3}){1,2}$/,l=e.match(a);if(!l)return{red:0,green:0,blue:0,alpha:0};const n=l[0];return n.length===3?{red:parseInt(`${n[0]}${n[0]}`,16),green:parseInt(`${n[1]}${n[1]}`,16),blue:parseInt(`${n[2]}${n[2]}`,16),alpha:1}:{red:parseInt(n.slice(0,2),16),green:parseInt(n.slice(2,4),16),blue:parseInt(n.slice(4,6),16),alpha:1}},y=e=>{const{red:a,green:l,blue:n}=e;return`${a.toString(16).padStart(2,"0")}${l.toString(16).padStart(2,"0")}${n.toString(16).padStart(2,"0")}`},k=(e,a)=>a==="HEX"?{...e,name:`#${y(e)}`}:{...e,name:`rgba(${e.red}, ${e.green}, ${e.blue}, ${e.alpha??1})`},g=(e,a=0,l=255)=>e.length===0||parseInt(e)<a?a:parseInt(e)>l?l:parseInt(e),w=({currentColor:e=q,onColorChange:a=()=>{},"data-test-id":l="color-picker-input"},n)=>r.jsx("div",{className:o.gradientInput,"data-test-id":l,ref:n,children:r.jsx(F,{className:o.reactColorful,color:{r:e.red,g:e.green,b:e.blue,a:e.alpha===void 0?1:e.alpha},onChange:u=>a({red:u.r,green:u.g,blue:u.b,alpha:u.a})})});w.displayName="ColorPicker.Gradient";const j=s.forwardRef(w);w.__docgenInfo={description:"",methods:[],displayName:"ColorPicker.Gradient",props:{currentColor:{required:!1,tsType:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},description:`@ignore
The active color in the color picker, passed down from the root component`,defaultValue:{value:"{ red: 255, green: 255, blue: 255, alpha: 1, name: '' }",computed:!1}},onColorChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(color: RgbaColor) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},name:"color"}],return:{name:"void"}}},description:`@ignore
Event handler called when the color changes, passed down from the root component`,defaultValue:{value:"() => {}",computed:!1}},"data-test-id":{required:!1,tsType:{name:"string"},description:"The test id of the color picker gradient input",defaultValue:{value:"'color-picker-input'",computed:!1}}}};j.__docgenInfo={description:"",methods:[],displayName:"ForwardedRefColorGradientInput",props:{currentColor:{required:!1,tsType:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},description:`@ignore
The active color in the color picker, passed down from the root component`,defaultValue:{value:"{ red: 255, green: 255, blue: 255, alpha: 1, name: '' }",computed:!1}},onColorChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(color: RgbaColor) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},name:"color"}],return:{name:"void"}}},description:`@ignore
Event handler called when the color changes, passed down from the root component`,defaultValue:{value:"() => {}",computed:!1}},"data-test-id":{required:!1,tsType:{name:"string"},description:"The test id of the color picker gradient input",defaultValue:{value:"'color-picker-input'",computed:!1}}}};const Q="_root_bc3n8_5",Y="_colorName_bc3n8_55",Z="_button_bc3n8_63",ee="_colorIndicator_bc3n8_76",re="_actions_bc3n8_95",ae="_clear_bc3n8_105",ne="_caret_bc3n8_118",d={root:Q,colorName:Y,button:Z,colorIndicator:ee,actions:re,clear:ae,caret:ne},T=({id:e,currentColor:a,isOpen:l,disabled:n=!1,onClear:u,onClick:p,"data-test-id":m="color-picker-input",...c},t)=>{const h=(a==null?void 0:a.name)??(a?k(a,"RGBA").name:"");return r.jsxs("div",{id:e,className:d.root,ref:t,"data-test-id":m,children:[r.jsxs("button",{className:d.button,...c,disabled:n,onClick:p,type:"button","data-color-input-select":!0,children:[(a==null?void 0:a.red)!==void 0?r.jsx("div",{"aria-hidden":!0,className:d.colorIndicator,style:{"--active-color":J(a)}}):r.jsxs(r.Fragment,{children:[r.jsx(X,{size:16}),r.jsx("span",{children:"Select Color"})]}),r.jsx("span",{className:d.colorName,children:h})]}),r.jsxs("div",{className:d.actions,children:[u&&r.jsx("button",{type:"button","aria-label":"Clear color",onClick:u,className:d.clear,disabled:n,children:r.jsx(B,{size:16})}),r.jsx("div",{className:d.caret,"data-state":l?"open":"closed",children:r.jsx(P,{size:16,className:d.caret})})]})]})};T.displayName="ColorPicker.Input";const N=s.forwardRef(T);T.__docgenInfo={description:"",methods:[],displayName:"ColorPicker.Input",props:{id:{required:!1,tsType:{name:"string"},description:""},currentColor:{required:!1,tsType:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},description:"The active color in the color picker"},isOpen:{required:!1,tsType:{name:"boolean"},description:"The open state of the color picker used to determine arrow state"},disabled:{required:!1,tsType:{name:"boolean"},description:"Whether the color picker input is disabled",defaultValue:{value:"false",computed:!1}},onClear:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"callback for clearing the color"},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Event handler called when the color picker input is clicked"},"data-test-id":{required:!1,tsType:{name:"string"},description:"The test id of the color picker input",defaultValue:{value:"'color-picker-input'",computed:!1}}}};N.__docgenInfo={description:"",methods:[],displayName:"ForwardedRefColorPickerInput",props:{id:{required:!1,tsType:{name:"string"},description:""},currentColor:{required:!1,tsType:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},description:"The active color in the color picker"},isOpen:{required:!1,tsType:{name:"boolean"},description:"The open state of the color picker used to determine arrow state"},disabled:{required:!1,tsType:{name:"boolean"},description:"Whether the color picker input is disabled",defaultValue:{value:"false",computed:!1}},onClear:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"callback for clearing the color"},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Event handler called when the color picker input is clicked"},"data-test-id":{required:!1,tsType:{name:"string"},description:"The test id of the color picker input",defaultValue:{value:"'color-picker-input'",computed:!1}}}};const C=({currentColor:e=q,onColorChange:a=()=>{},currentFormat:l=R,setCurrentFormat:n=()=>{},"data-test-id":u="color-picker-value-input"},p)=>{const[m,c]=s.useState(()=>y(e));return s.useEffect(()=>{c(y(e))},[e]),r.jsxs("div",{className:o.inputs,"data-test-id":u,ref:p,children:[r.jsx("div",{className:o.colorFormatInput,children:r.jsxs(v,{"data-test-id":"color-picker-select-format","aria-label":"Select a color format",onSelect:t=>{n(t)},value:l,children:[r.jsx(v.Item,{value:"HEX",children:"HEX"}),r.jsx(v.Item,{value:"RGBA",children:"RGBA"})]})}),l==="HEX"?r.jsx(i.Root,{"data-test-id":"color-picker-value-input-hex",className:o.valueInput,type:"text",value:m,status:x(m)?"neutral":"error",onBlur:t=>{x(t.target.value)&&a({...K(t.target.value),alpha:e.alpha})},onChange:t=>{c(t.target.value)},"aria-label":"Hex color value",children:r.jsx(i.Slot,{name:"left",children:r.jsx("span",{className:o.inputDecorator,children:"#"})})}):r.jsxs("div",{className:o.colorChannelInputGroup,children:[r.jsx(i.Root,{"data-test-id":"color-picker-value-input-red",className:o.valueInput,value:e.red,type:"number",onChange:t=>{a({...e,red:g(t.target.value)})},"aria-label":"Red Color Channel",children:r.jsx(i.Slot,{name:"left",children:r.jsx("span",{className:o.inputDecorator,children:"R"})})}),r.jsx(i.Root,{"data-test-id":"color-picker-value-input-green",className:o.valueInput,value:e.green,type:"number",onChange:t=>{a({...e,green:g(t.target.value)})},"aria-label":"Green Color Channel",children:r.jsx(i.Slot,{name:"left",children:r.jsx("span",{className:o.inputDecorator,children:"G"})})}),r.jsx(i.Root,{"data-test-id":"color-picker-value-input-blue",className:o.valueInput,value:e.blue,type:"number",onChange:t=>{a({...e,blue:g(t.target.value)})},"aria-label":"Blue Color Channel",children:r.jsx(i.Slot,{name:"left",children:r.jsx("span",{className:o.inputDecorator,children:"B"})})})]}),r.jsx("div",{className:o.colorAlphaInput,children:r.jsxs(i.Root,{"data-test-id":"color-picker-value-input-alpha",className:o.valueInput,value:e.alpha===void 0?100:Math.trunc(e.alpha*100).toString(),type:"number",onChange:t=>{a({...e,alpha:g(t.target.value,0,100)/100})},"aria-label":"Color Opacity",children:[r.jsx(i.Slot,{name:"left",children:r.jsx("span",{className:o.inputDecorator,children:"A"})}),r.jsx(i.Slot,{name:"right",children:r.jsx("span",{className:o.inputDecorator,children:"%"})})]})})]})};C.displayName="ColorPicker.Values";const E=s.forwardRef(C);C.__docgenInfo={description:"",methods:[],displayName:"ColorPicker.Values",props:{currentColor:{required:!1,tsType:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},description:`@ignore
The active color in the color picker, passed down from the root component`,defaultValue:{value:"{ red: 255, green: 255, blue: 255, alpha: 1, name: '' }",computed:!1}},onColorChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(color: RgbaColor) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},name:"color"}],return:{name:"void"}}},description:`@ignore
Event handler called when the color changes, passed down from the root component`,defaultValue:{value:"() => {}",computed:!1}},currentFormat:{required:!1,tsType:{name:"union",raw:"'HEX' | 'RGBA'",elements:[{name:"literal",value:"'HEX'"},{name:"literal",value:"'RGBA'"}]},description:`@ignore
The format to use for the color input, passed down from the root component`,defaultValue:{value:"'HEX'",computed:!1}},setCurrentFormat:{required:!1,tsType:{name:"signature",type:"function",raw:"(format: ColorFormat) => void",signature:{arguments:[{type:{name:"union",raw:"'HEX' | 'RGBA'",elements:[{name:"literal",value:"'HEX'"},{name:"literal",value:"'RGBA'"}]},name:"format"}],return:{name:"void"}}},description:`@ignore
The format to use for the color input, passed down from the root component`,defaultValue:{value:"() => {}",computed:!1}},"data-test-id":{required:!1,tsType:{name:"string"},description:"The test id of the color picker value input",defaultValue:{value:"'color-picker-value-input'",computed:!1}}}};E.__docgenInfo={description:"",methods:[],displayName:"ForwardedRefColorValueInput",props:{currentColor:{required:!1,tsType:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},description:`@ignore
The active color in the color picker, passed down from the root component`,defaultValue:{value:"{ red: 255, green: 255, blue: 255, alpha: 1, name: '' }",computed:!1}},onColorChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(color: RgbaColor) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},name:"color"}],return:{name:"void"}}},description:`@ignore
Event handler called when the color changes, passed down from the root component`,defaultValue:{value:"() => {}",computed:!1}},currentFormat:{required:!1,tsType:{name:"union",raw:"'HEX' | 'RGBA'",elements:[{name:"literal",value:"'HEX'"},{name:"literal",value:"'RGBA'"}]},description:`@ignore
The format to use for the color input, passed down from the root component`,defaultValue:{value:"'HEX'",computed:!1}},setCurrentFormat:{required:!1,tsType:{name:"signature",type:"function",raw:"(format: ColorFormat) => void",signature:{arguments:[{type:{name:"union",raw:"'HEX' | 'RGBA'",elements:[{name:"literal",value:"'HEX'"},{name:"literal",value:"'RGBA'"}]},name:"format"}],return:{name:"void"}}},description:`@ignore
The format to use for the color input, passed down from the root component`,defaultValue:{value:"() => {}",computed:!1}},"data-test-id":{required:!1,tsType:{name:"string"},description:"The test id of the color picker value input",defaultValue:{value:"'color-picker-value-input'",computed:!1}}}};const _=({children:e,currentColor:a=q,onColorChange:l=()=>{},currentFormat:n,onFormatChange:u=()=>{},defaultFormat:p=R,"data-test-id":m="color-picker-input",...c},t)=>{const[h,G]=s.useState(p),I=s.useMemo(()=>n??h,[n,h]);return r.jsx("div",{className:o.root,"data-picker-type":"custom-color","data-test-id":m,ref:t,children:s.Children.map(e,H=>r.jsx(te,{...c,onColorChange:f=>{l(k(f,I))},currentColor:a,currentFormat:I,setCurrentFormat:f=>{G(f),u(f),l(k(a,f))},children:H}))})};_.displayName="ColorPicker";const te=({children:e,...a})=>r.jsx(A,{...a,children:e}),V=s.forwardRef(_),b={Root:V,Values:E,Gradient:j,Input:N};b.Root.displayName="ColorPicker.Root";b.Values.displayName="ColorPicker.Values";b.Gradient.displayName="ColorPicker.Gradient";b.Input.displayName="ColorPicker.Input";_.__docgenInfo={description:"",methods:[],displayName:"ColorPicker",props:{children:{required:!1,tsType:{name:"ReactNode"},description:"The children of the color picker component. This can contain multiple `ColorPicker.Values` or `ColorPicker.Gradient` components."},currentColor:{required:!1,tsType:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},description:"The active color in the color picker",defaultValue:{value:"{ red: 255, green: 255, blue: 255, alpha: 1, name: '' }",computed:!1}},onColorChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(color: RgbaColor) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},name:"color"}],return:{name:"void"}}},description:"Event handler called when the color changes",defaultValue:{value:"() => {}",computed:!1}},currentFormat:{required:!1,tsType:{name:"union",raw:"'HEX' | 'RGBA'",elements:[{name:"literal",value:"'HEX'"},{name:"literal",value:"'RGBA'"}]},description:"The active color format in the color picker"},onFormatChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(format: ColorFormat) => void",signature:{arguments:[{type:{name:"union",raw:"'HEX' | 'RGBA'",elements:[{name:"literal",value:"'HEX'"},{name:"literal",value:"'RGBA'"}]},name:"format"}],return:{name:"void"}}},description:"Event handler called when the color format changes",defaultValue:{value:"() => {}",computed:!1}},defaultFormat:{required:!1,tsType:{name:"union",raw:"'HEX' | 'RGBA'",elements:[{name:"literal",value:"'HEX'"},{name:"literal",value:"'RGBA'"}]},description:`The default format to use for the color input when not controlled externally
@default "HEX"`,defaultValue:{value:"'HEX'",computed:!1}},"data-test-id":{required:!1,tsType:{name:"string"},description:"The test id of the color picker",defaultValue:{value:"'color-picker-input'",computed:!1}}}};V.__docgenInfo={description:"",methods:[],displayName:"ForwardedRefColorPicker",props:{children:{required:!1,tsType:{name:"ReactNode"},description:"The children of the color picker component. This can contain multiple `ColorPicker.Values` or `ColorPicker.Gradient` components."},currentColor:{required:!1,tsType:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},description:"The active color in the color picker",defaultValue:{value:"{ red: 255, green: 255, blue: 255, alpha: 1, name: '' }",computed:!1}},onColorChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(color: RgbaColor) => void",signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
    red: number;
    green: number;
    blue: number;
    alpha?: number;
    name?: string;
}`,signature:{properties:[{key:"red",value:{name:"number",required:!0}},{key:"green",value:{name:"number",required:!0}},{key:"blue",value:{name:"number",required:!0}},{key:"alpha",value:{name:"number",required:!1}},{key:"name",value:{name:"string",required:!1}}]}},name:"color"}],return:{name:"void"}}},description:"Event handler called when the color changes",defaultValue:{value:"() => {}",computed:!1}},currentFormat:{required:!1,tsType:{name:"union",raw:"'HEX' | 'RGBA'",elements:[{name:"literal",value:"'HEX'"},{name:"literal",value:"'RGBA'"}]},description:"The active color format in the color picker"},onFormatChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(format: ColorFormat) => void",signature:{arguments:[{type:{name:"union",raw:"'HEX' | 'RGBA'",elements:[{name:"literal",value:"'HEX'"},{name:"literal",value:"'RGBA'"}]},name:"format"}],return:{name:"void"}}},description:"Event handler called when the color format changes",defaultValue:{value:"() => {}",computed:!1}},defaultFormat:{required:!1,tsType:{name:"union",raw:"'HEX' | 'RGBA'",elements:[{name:"literal",value:"'HEX'"},{name:"literal",value:"'RGBA'"}]},description:`The default format to use for the color input when not controlled externally
@default "HEX"`,defaultValue:{value:"'HEX'",computed:!1}},"data-test-id":{required:!1,tsType:{name:"string"},description:"The test id of the color picker",defaultValue:{value:"'color-picker-input'",computed:!1}}}};export{w as C,C as a,_ as b,b as c,T as d};
