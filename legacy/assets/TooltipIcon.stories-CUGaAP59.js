import{j as d}from"./iframe-Bu4L2X3M.js";import{I as T}from"./LegacyTooltip-924BhB3-.js";import{I as S}from"./IconSize-BcCrF_mi.js";import{T as f,a as g}from"./TooltipIcon-C1M-L0PR.js";import"./preload-helper-C1FmrZbK.js";import"./useLink-Ci2dsncg.js";import"./useFocusable-DJPYQSY0.js";import"./useFocusRing-aRsYH049.js";import"./useEffectEvent-C9QX9RtM.js";import"./chain-DLXw64Hn.js";import"./index-CuYoSRMf.js";import"./usePopper-Bxnjv0x2.js";import"./index-ySyf93fl.js";import"./Button-CyFEToUK.js";import"./useButton-uCdTDTpK.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./Portal-DY8zyLgs.js";import"./useMemoizedId-CDrFaSch.js";import"./IconCheckMark-CnJazdmc.js";import"./IconExclamationMarkCircle24-BToFQ0YX.js";import"./IconExclamationMarkTriangle-CxjqNEF_.js";import"./IconExclamationMarkTriangle24-0DeCRmP4.js";import"./IconQuestionMarkCircle-39pzYv0I.js";const H={title:"Deprecated/TooltipIcon",component:g,tags:["autodocs"],argTypes:{triggerStyle:{options:Object.values(f),control:{type:"select"}}},args:{tooltip:{content:"Lorem ipsum dolor sit amet."},triggerStyle:"Primary"},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Tooltip component](/docs/current_components-tooltip--documentation) instead."}}}},e=I=>d.jsx(g,{...I}),r=e.bind({}),o=e.bind({});o.args={iconSize:S.Size20};const t=e.bind({});t.args={triggerIcon:d.jsx(T,{filled:!0})};var s,i,p;r.parameters={...r.parameters,docs:{...(s=r.parameters)==null?void 0:s.docs,source:{originalSource:`(args: TooltipIconProps) => {
  return <TooltipIcon {...args} />;
}`,...(p=(i=r.parameters)==null?void 0:i.docs)==null?void 0:p.source}}};var a,n,c;o.parameters={...o.parameters,docs:{...(a=o.parameters)==null?void 0:a.docs,source:{originalSource:`(args: TooltipIconProps) => {
  return <TooltipIcon {...args} />;
}`,...(c=(n=o.parameters)==null?void 0:n.docs)==null?void 0:c.source}}};var m,l,u;t.parameters={...t.parameters,docs:{...(m=t.parameters)==null?void 0:m.docs,source:{originalSource:`(args: TooltipIconProps) => {
  return <TooltipIcon {...args} />;
}`,...(u=(l=t.parameters)==null?void 0:l.docs)==null?void 0:u.source}}};const J=["WithDefaultIconSize","WithCustomIconSize","WithCustomIcon"];export{t as WithCustomIcon,o as WithCustomIconSize,r as WithDefaultIconSize,J as __namedExportsOrder,H as default};
