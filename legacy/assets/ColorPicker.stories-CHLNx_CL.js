import{r as n,j as y}from"./iframe-Bsxk6cFR.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-BsuhHaKQ.js";import"./preload-helper-C1FmrZbK.js";import"./SegmentedControls-BmDTSrlE.js";import"./useFocusRing-stKtxXd4.js";import"./useEffectEvent-Bi8UaLd9.js";import"./useFocusable-BzHoFin2.js";import"./chain-C8mx6lyL.js";import"./index-CaU0m7r7.js";import"./useFormValidationState-BLrnd7ld.js";import"./FocusScope-Dg9Kujtj.js";import"./useField-CfZEL9Tj.js";import"./useLabels-1JzSpokk.js";import"./context-vxbyF1xM.js";import"./VisuallyHidden-CjZHEWVQ.js";import"./useControlledState-C7l0FGCg.js";import"./useMemoizedId-yiCK1tQN.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-CZocaW6a.js";import"./TextInput-BZxVMLa_.js";import"./LoadingCircle-COaoHo8J.js";import"./IconCheckMark-CF046Ot1.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-YZVLliuR.js";import"./IconExclamationMarkTriangle-BHIGzko0.js";import"./IconExclamationMarkTriangle24-DxnwpWP-.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-UFmzY47G.js";import"./useLink-BZBpEwDw.js";import"./usePopper-DrP5WGJT.js";import"./index-x6daeC6L.js";import"./Button-Bp7GppKu.js";import"./useButton-Dw7Jadw_.js";import"./Portal-Jhq17_f2.js";import"./IconExclamationMarkCircle24-DgeP_4Kk.js";import"./IconMagnifier-BP2F66uC.js";import"./IconMagnifier16-BqsuhzqD.js";import"./index-BexO77yM.js";import"./Dropdown-CWirDl_Y.js";import"./useOverlayTriggerState-DtMgQK4F.js";import"./useMenuTrigger-OLkirz11.js";import"./useLocalizedStringFormatter-JaI9mEcC.js";import"./helper-BQ1w4v7O.js";import"./keyboard-C_eOz8cp.js";import"./SelectionManager-DVw-RTYY.js";import"./MenuItem-BjebAF2n.js";import"./IconCaretRight-CwnKgmXd.js";import"./elements-BOYmskOL.js";import"./Trigger-Bs0kLuiJ.js";import"./IconCaretDown-i-nLv0yw.js";import"./IconCaretDown16-CYfnQI0Z.js";import"./IconTrashBin16-iURH4z5d.js";import"./IconTrashBin24-Bq_7U2EB.js";import"./EnablePortalWrapper-B2Fripgl.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
