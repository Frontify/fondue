import{r as n,j as y}from"./iframe-Lx3fyMem.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-DaQ2du2Y.js";import"./preload-helper-C1FmrZbK.js";import"./SegmentedControls-CjuoOVWW.js";import"./useFocusRing-CiEMWpN8.js";import"./useEffectEvent-CZMgj56A.js";import"./useFocusable-BdWoFksO.js";import"./chain-DlM-WH6Z.js";import"./index-B3Qgt-lS.js";import"./useFormValidationState-CFWT4Pdw.js";import"./FocusScope-QALdwTY5.js";import"./useField-Bte4prWa.js";import"./useLabels-BOiJgpj8.js";import"./context-BkIx54-5.js";import"./VisuallyHidden-DBe1IzoD.js";import"./useControlledState-gRWhy3Ty.js";import"./useMemoizedId-DQZ_sCPh.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-B1yRAbwn.js";import"./TextInput-BJD_WRwQ.js";import"./LoadingCircle-Djw0rkH-.js";import"./IconCheckMark-BqM_w58-.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-LM-zbUZv.js";import"./IconExclamationMarkTriangle-NkEknEiV.js";import"./IconExclamationMarkTriangle24-COrLupZ7.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-BKLxuPOW.js";import"./useLink-BPyXKjtr.js";import"./usePopper-Bihzf9VH.js";import"./index-DqcmmWsV.js";import"./Button-BzXDiA4y.js";import"./useButton-CGHLoVvN.js";import"./Portal-DJmtadYa.js";import"./IconExclamationMarkCircle24-DDTJ82xZ.js";import"./IconMagnifier-Ciia7I-P.js";import"./IconMagnifier16-DE5QZwH0.js";import"./index-D7B_e2mL.js";import"./Dropdown-DDhfHNyw.js";import"./useOverlayTriggerState-CCXPtXlH.js";import"./useMenuTrigger-DRGK1-jS.js";import"./useLocalizedStringFormatter-Cb2HzS-T.js";import"./helper-BbOdFz1v.js";import"./keyboard-ClHoxSpg.js";import"./SelectionManager-XBXhEBnb.js";import"./MenuItem-DZSJkOuY.js";import"./IconCaretRight-BfArJPnr.js";import"./elements-BOYmskOL.js";import"./Trigger-mFyTSG97.js";import"./IconCaretDown-OCqlC0uU.js";import"./IconCaretDown16-CaFOQOw1.js";import"./IconTrashBin16-DX9WpK3E.js";import"./IconTrashBin24-CjssmbhN.js";import"./EnablePortalWrapper-DK4GCkIj.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
