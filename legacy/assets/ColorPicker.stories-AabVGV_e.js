import{r as n,j as y}from"./iframe-xk1vLOp0.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-9S-EbXIb.js";import"./preload-helper-C1FmrZbK.js";import"./SegmentedControls-B8I1e8la.js";import"./useFocusRing-Cd2XRZg0.js";import"./useEffectEvent-BjDNl9OE.js";import"./useFocusable-DMpt9YP_.js";import"./chain-Ct5H3mE4.js";import"./index-CfHX2Wg2.js";import"./useFormValidationState-C4HEZm9c.js";import"./FocusScope-EbRQ0Guv.js";import"./useField-Bu-QY__9.js";import"./useLabels-lxgQttMN.js";import"./context-BZ0Ub6M7.js";import"./VisuallyHidden-CR78Mz5T.js";import"./useControlledState-sFywO5I-.js";import"./useMemoizedId-DNCYjqen.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-Cy591kDE.js";import"./TextInput-Bof6OvPM.js";import"./LoadingCircle-BJF6o0jm.js";import"./IconCheckMark-CZRtbEQD.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-_hgb6uSI.js";import"./IconExclamationMarkTriangle-D1Rp3cke.js";import"./IconExclamationMarkTriangle24-Dcd-X1K7.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-DFmu5-8O.js";import"./useLink-BuoFStRX.js";import"./usePopper-Ja3ynHP-.js";import"./index-v42I2N6P.js";import"./Button-BDfk1GAp.js";import"./useButton-DVBleBPx.js";import"./Portal-CcS2aujD.js";import"./IconExclamationMarkCircle24-D7sTGgkk.js";import"./IconMagnifier-OqTu6dp1.js";import"./IconMagnifier16-DBDoE9Tq.js";import"./index-DEhhKnT_.js";import"./Dropdown-D4CKN3Yl.js";import"./useOverlayTriggerState-D-Z8dNYM.js";import"./useMenuTrigger-DHZu3ZPY.js";import"./useLocalizedStringFormatter-i_SGUCjN.js";import"./helper-Cai0qWzg.js";import"./keyboard-yMV5D90t.js";import"./SelectionManager-BOLg2PNO.js";import"./MenuItem-fUS3Gbeo.js";import"./IconCaretRight-BbznFg1A.js";import"./elements-BOYmskOL.js";import"./Trigger-BJxh1iXv.js";import"./IconCaretDown-x05uh9Bd.js";import"./IconCaretDown16-Dah412Df.js";import"./IconTrashBin16-BRdjN3Qb.js";import"./IconTrashBin24-CFcOsdbb.js";import"./EnablePortalWrapper-DxmYvQ98.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
