import{j as d}from"./iframe-DooYt4M7.js";import{I as T}from"./LegacyTooltip-Bme4L1gf.js";import{I as S}from"./IconSize-BcCrF_mi.js";import{T as f,a as g}from"./TooltipIcon-K7_0wyZX.js";import"./preload-helper-C1FmrZbK.js";import"./useLink-Bg3T3WJF.js";import"./useFocusable-Bz_tnZql.js";import"./useFocusRing-9IwpsfI2.js";import"./useEffectEvent-BtxKI83K.js";import"./chain-CxoLEBLW.js";import"./index-C5RpMxi5.js";import"./usePopper-Bj5tkPE3.js";import"./index-Cl8iBCh-.js";import"./Button-CBoATLw8.js";import"./useButton-drRkTRRK.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./Portal-BQitoXWA.js";import"./useMemoizedId-Bz_bLNYA.js";import"./IconCheckMark-ByI5Yptv.js";import"./IconExclamationMarkCircle24-BD3X71HN.js";import"./IconExclamationMarkTriangle-CRq7c9ri.js";import"./IconExclamationMarkTriangle24-DYaHi-Qa.js";import"./IconQuestionMarkCircle-DyhSd_qX.js";const H={title:"Deprecated/TooltipIcon",component:g,tags:["autodocs"],argTypes:{triggerStyle:{options:Object.values(f),control:{type:"select"}}},args:{tooltip:{content:"Lorem ipsum dolor sit amet."},triggerStyle:"Primary"},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Tooltip component](/docs/current_components-tooltip--documentation) instead."}}}},e=I=>d.jsx(g,{...I}),r=e.bind({}),o=e.bind({});o.args={iconSize:S.Size20};const t=e.bind({});t.args={triggerIcon:d.jsx(T,{filled:!0})};var s,i,p;r.parameters={...r.parameters,docs:{...(s=r.parameters)==null?void 0:s.docs,source:{originalSource:`(args: TooltipIconProps) => {
  return <TooltipIcon {...args} />;
}`,...(p=(i=r.parameters)==null?void 0:i.docs)==null?void 0:p.source}}};var a,n,c;o.parameters={...o.parameters,docs:{...(a=o.parameters)==null?void 0:a.docs,source:{originalSource:`(args: TooltipIconProps) => {
  return <TooltipIcon {...args} />;
}`,...(c=(n=o.parameters)==null?void 0:n.docs)==null?void 0:c.source}}};var m,l,u;t.parameters={...t.parameters,docs:{...(m=t.parameters)==null?void 0:m.docs,source:{originalSource:`(args: TooltipIconProps) => {
  return <TooltipIcon {...args} />;
}`,...(u=(l=t.parameters)==null?void 0:l.docs)==null?void 0:u.source}}};const J=["WithDefaultIconSize","WithCustomIconSize","WithCustomIcon"];export{t as WithCustomIcon,o as WithCustomIconSize,r as WithDefaultIconSize,J as __namedExportsOrder,H as default};
