import{r as n,j as y}from"./iframe-DooYt4M7.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-WlEJibVm.js";import"./preload-helper-C1FmrZbK.js";import"./SegmentedControls-DNR29hUI.js";import"./useFocusRing-9IwpsfI2.js";import"./useEffectEvent-BtxKI83K.js";import"./useFocusable-Bz_tnZql.js";import"./chain-CxoLEBLW.js";import"./index-C5RpMxi5.js";import"./useFormValidationState-n3NmtIsc.js";import"./FocusScope-0434QTiG.js";import"./useField-oE_sFGqR.js";import"./useLabels-CTtlHGGK.js";import"./context-bUbPww-J.js";import"./VisuallyHidden-C_bKqhYT.js";import"./useControlledState-iFmLqb8l.js";import"./useMemoizedId-Bz_bLNYA.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-ChCr44h9.js";import"./TextInput-rjYQRaAk.js";import"./LoadingCircle-BCS4R7Lt.js";import"./IconCheckMark-ByI5Yptv.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-squDdsNY.js";import"./IconExclamationMarkTriangle-CRq7c9ri.js";import"./IconExclamationMarkTriangle24-DYaHi-Qa.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-Bme4L1gf.js";import"./useLink-Bg3T3WJF.js";import"./usePopper-Bj5tkPE3.js";import"./index-Cl8iBCh-.js";import"./Button-CBoATLw8.js";import"./useButton-drRkTRRK.js";import"./Portal-BQitoXWA.js";import"./IconExclamationMarkCircle24-BD3X71HN.js";import"./IconMagnifier-CSHkIv29.js";import"./IconMagnifier16-DhtOGph2.js";import"./index-CkiDpoID.js";import"./Dropdown-CqLMTyHa.js";import"./useOverlayTriggerState-CrNulr7-.js";import"./useMenuTrigger-DCN4Efip.js";import"./useLocalizedStringFormatter-B2g_DFaU.js";import"./helper-DCtgrWV1.js";import"./keyboard-DQqIu-A5.js";import"./SelectionManager-BhgyB-70.js";import"./MenuItem-B_5P3j1N.js";import"./IconCaretRight-CKJbTXmi.js";import"./elements-BOYmskOL.js";import"./Trigger-COfGx2MI.js";import"./IconCaretDown-cv0s-_Iw.js";import"./IconCaretDown16-DMP5ylk8.js";import"./IconTrashBin16-Clw4BYY7.js";import"./IconTrashBin24-yfl3UxsQ.js";import"./EnablePortalWrapper-OYZPVrt8.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
