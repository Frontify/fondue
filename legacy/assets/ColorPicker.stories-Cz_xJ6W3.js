import{r as n,j as y}from"./iframe-loALxrwA.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-Ca0hPHrQ.js";import"./preload-helper-C1FmrZbK.js";import"./SegmentedControls-9KDHQGip.js";import"./useFocusRing-KMhl1UJS.js";import"./useEffectEvent-4xwT3IDe.js";import"./useFocusable-gZZJckaE.js";import"./chain-DPfOkws3.js";import"./index-Dxja0Wkm.js";import"./useFormValidationState-Be-B2n0Z.js";import"./FocusScope-G2sE9zlO.js";import"./useField-DibquiUW.js";import"./useLabels-bdaQqbJL.js";import"./context-BO2wI_GH.js";import"./VisuallyHidden-BnxHhjaw.js";import"./useControlledState-DLXBMBYE.js";import"./useMemoizedId-Dz0xJZ2i.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-BIKRElWW.js";import"./TextInput-BjAQOjJb.js";import"./LoadingCircle-B9uL4gHk.js";import"./IconCheckMark-B_q4DDrQ.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-CrFfhLsy.js";import"./IconExclamationMarkTriangle-B8PE083H.js";import"./IconExclamationMarkTriangle24-qoBG5I0z.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-Cor5DXUh.js";import"./useLink-C5uGPnj2.js";import"./usePopper-c8iwtMtM.js";import"./index-D5EgzJqU.js";import"./Button-xxPrQzX3.js";import"./useButton-CIYJdvKD.js";import"./Portal-BOzxa9wa.js";import"./IconExclamationMarkCircle24-EhlvbpVM.js";import"./IconMagnifier-O7ARpDuy.js";import"./IconMagnifier16-gevZEpJO.js";import"./index-CGi7lr8j.js";import"./Dropdown-CaaOnjf9.js";import"./useOverlayTriggerState-am9Ln9_3.js";import"./useMenuTrigger-Chk3MCxN.js";import"./useLocalizedStringFormatter-BJknxX9O.js";import"./helper-PKiWzScp.js";import"./keyboard-BryKsZUz.js";import"./SelectionManager-BoAOKyeU.js";import"./MenuItem-CmE5NgSO.js";import"./IconCaretRight-Dhoo0xjN.js";import"./elements-BOYmskOL.js";import"./Trigger-2VLOT0SV.js";import"./IconCaretDown-CAMMwaLk.js";import"./IconCaretDown16-C9Kzqhea.js";import"./IconTrashBin16-B3StqCVf.js";import"./IconTrashBin24-BoRbGsWA.js";import"./EnablePortalWrapper-BXnrvz9y.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
