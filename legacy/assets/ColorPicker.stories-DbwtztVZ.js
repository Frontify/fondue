import{r as n,j as y}from"./iframe-Cuuz2GJq.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-B5tpSEVj.js";import"./preload-helper-C1FmrZbK.js";import"./SegmentedControls-DZ9ANJ2p.js";import"./useFocusRing-DgQhTTal.js";import"./useEffectEvent-DxEqDHwu.js";import"./useFocusable-DgoKNfv-.js";import"./chain-DYCdTnn2.js";import"./index-Br928Knc.js";import"./useFormValidationState-BI39EsGV.js";import"./FocusScope-CIf31Vcm.js";import"./useField-CgANIuYW.js";import"./useLabels-Bx4kRviA.js";import"./context-ns_XzYQq.js";import"./VisuallyHidden-D_qsO5ao.js";import"./useControlledState-CHpGxI0o.js";import"./useMemoizedId-DY15yGWN.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-DcDRSLoG.js";import"./TextInput-B0PGVwIc.js";import"./LoadingCircle-Dyv8zZXb.js";import"./IconCheckMark-BdzytnOu.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-eNHuqyEX.js";import"./IconExclamationMarkTriangle-BCkhpLUe.js";import"./IconExclamationMarkTriangle24-DNVR-sDp.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-DOBnvWNZ.js";import"./useLink-D0s49w-R.js";import"./usePopper-BP7kRwwG.js";import"./index-BSoEGWQc.js";import"./Button-DcFz9xYt.js";import"./useButton-CCmdIFzv.js";import"./Portal-CcpWWYs1.js";import"./IconExclamationMarkCircle24-qz18QCqO.js";import"./IconMagnifier-Dr9E7C3K.js";import"./IconMagnifier16-CEDVwxqP.js";import"./index-BlTs3H_J.js";import"./Dropdown-C5m9NG2U.js";import"./useOverlayTriggerState-Dbbm0IMz.js";import"./useMenuTrigger-hCfnbIX8.js";import"./useLocalizedStringFormatter-km1Sn3tS.js";import"./helper-B4sBBq-s.js";import"./keyboard-jnY0-pab.js";import"./SelectionManager-BVKLJ6FM.js";import"./MenuItem-74wx-VXz.js";import"./IconCaretRight-BTK5BHy5.js";import"./elements-BOYmskOL.js";import"./Trigger-tDjrHz-_.js";import"./IconCaretDown-BWao0pAC.js";import"./IconCaretDown16-Bo7f-Yz7.js";import"./IconTrashBin16-NjNJohRI.js";import"./IconTrashBin24-D3NdYagb.js";import"./EnablePortalWrapper-Dp3mgTzX.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
