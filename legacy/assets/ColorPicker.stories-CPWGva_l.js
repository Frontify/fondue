import{r as n,j as y}from"./iframe-H4EIHqlx.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-mQ7Ii72H.js";import"./preload-helper-C1FmrZbK.js";import"./SegmentedControls-qdlPaxPN.js";import"./useFocusRing-BgUd5BR7.js";import"./useEffectEvent-C_IQxYhx.js";import"./useFocusable-DTCa4SqE.js";import"./chain-DQvBJnse.js";import"./index-DlrjtBmU.js";import"./useFormValidationState-CMOyU9tG.js";import"./FocusScope-qW6Sf1bq.js";import"./useField-CEvqkjOx.js";import"./useLabels-FTiAqVtv.js";import"./context-pc1t5AW0.js";import"./VisuallyHidden-BxoBsTUN.js";import"./useControlledState-BwCEOs4d.js";import"./useMemoizedId-UwiqPoY6.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-Cc-b-79g.js";import"./TextInput-D6FRwz5L.js";import"./LoadingCircle-cqNAwJed.js";import"./IconCheckMark-CHxLPHD4.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-CxjY-Hqb.js";import"./IconExclamationMarkTriangle-K99hKmWz.js";import"./IconExclamationMarkTriangle24-ChMo0sGD.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-CjQ6vgqx.js";import"./useLink-d86eSztZ.js";import"./usePopper-BDBm9nqb.js";import"./index-DsgG594b.js";import"./Button-CXaEniIA.js";import"./useButton-mGVAuZHj.js";import"./Portal-CW7VmUKg.js";import"./IconExclamationMarkCircle24-CzbbaGxH.js";import"./IconMagnifier-QHeVad9T.js";import"./IconMagnifier16-DpHLrEmC.js";import"./index-CEnOGdP5.js";import"./Dropdown-D9la7LTr.js";import"./useOverlayTriggerState-D-nAPxky.js";import"./useMenuTrigger-2a9WK_4Y.js";import"./useLocalizedStringFormatter-A6H_epb7.js";import"./helper-BLUOy31a.js";import"./keyboard-Bgy3IRLV.js";import"./SelectionManager-CzbgPH4w.js";import"./MenuItem-Dabj5Jcl.js";import"./IconCaretRight-DSSd_h10.js";import"./elements-BOYmskOL.js";import"./Trigger-EEtgFzPe.js";import"./IconCaretDown-D2PohoYe.js";import"./IconCaretDown16-CI4FxQbC.js";import"./IconTrashBin16-DnTUTGRm.js";import"./IconTrashBin24-cmiN-QmN.js";import"./EnablePortalWrapper-DYlU6loR.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
