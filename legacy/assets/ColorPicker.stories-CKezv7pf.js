import{r as n,j as y}from"./iframe--2rw_cjg.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-CkgjxYcY.js";import"./preload-helper-C1FmrZbK.js";import"./SegmentedControls-C4iARABC.js";import"./useFocusRing-BsE3KrSK.js";import"./useEffectEvent-7SpFmDeR.js";import"./useFocusable-AxjEqYd6.js";import"./chain-C2bf6kwx.js";import"./index-DQ-tYZ13.js";import"./useFormValidationState-B-tZ4Eq5.js";import"./FocusScope-B6lgz3yj.js";import"./useField-C3-Q__DF.js";import"./useLabels-DJ9q4a3M.js";import"./context-ddobrZ0u.js";import"./VisuallyHidden-DUr7ThBi.js";import"./useControlledState-zKuWR2Qz.js";import"./useMemoizedId-D0AyLdJ9.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-Bcbj-oDF.js";import"./TextInput-iYevrUQR.js";import"./LoadingCircle-uT_yoQL1.js";import"./IconCheckMark-BkiS9-rb.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-B8uxEUE8.js";import"./IconExclamationMarkTriangle-CzbtRrPB.js";import"./IconExclamationMarkTriangle24-95cBFDWm.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-B4lgEf8F.js";import"./useLink-B735unP_.js";import"./usePopper-CqJZcUvQ.js";import"./index-BCqD7aw8.js";import"./Button-CDpAvR_7.js";import"./useButton-BR4gTdNq.js";import"./Portal-Bog-ilIj.js";import"./IconExclamationMarkCircle24-Bh5vOeGE.js";import"./IconMagnifier-CFYzvvMl.js";import"./IconMagnifier16-CKFNfC_K.js";import"./index-jj_W5qFK.js";import"./Dropdown-DtVZRx1B.js";import"./useOverlayTriggerState-BsH2Kftu.js";import"./useMenuTrigger-Coa4GpHM.js";import"./useLocalizedStringFormatter-BFAsQve6.js";import"./helper-CDHCISTK.js";import"./keyboard-BlzZ7KRq.js";import"./SelectionManager-DBE0gQ_v.js";import"./MenuItem-BrtW96Sm.js";import"./IconCaretRight-CjJOrGWt.js";import"./elements-BOYmskOL.js";import"./Trigger-BqI9Ucl1.js";import"./IconCaretDown-C5uKGKgw.js";import"./IconCaretDown16-D3D4HTlj.js";import"./IconTrashBin16-BlgDT1jV.js";import"./IconTrashBin24-DeRmc9qk.js";import"./EnablePortalWrapper--WRtXlIr.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
