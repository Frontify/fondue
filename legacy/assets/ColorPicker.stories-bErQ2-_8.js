import{r as n,j as y}from"./iframe-DTy7hSDB.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-nV5HQMOm.js";import"./preload-helper-C1FmrZbK.js";import"./SegmentedControls-Cb0NS_-J.js";import"./useFocusRing-BF_hD86R.js";import"./useEffectEvent-DWzMvHEb.js";import"./useFocusable-DDn7q-OS.js";import"./chain-Dz97J3RG.js";import"./index-BmPKOmbc.js";import"./useFormValidationState-Cl6CaWoJ.js";import"./FocusScope-CUauU3xv.js";import"./useField-B5Mwfvys.js";import"./useLabels-4QxHVeFA.js";import"./context-DuIuuA0V.js";import"./VisuallyHidden-CKtcjs_Y.js";import"./useControlledState-BsajwW-Q.js";import"./useMemoizedId-Du4L_hMj.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-BMZgt90c.js";import"./TextInput-CHRYntRv.js";import"./LoadingCircle-Ou7o56up.js";import"./IconCheckMark-Dg23ywij.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-bYE-tDxm.js";import"./IconExclamationMarkTriangle-YIBYFaAr.js";import"./IconExclamationMarkTriangle24-DTwuytdQ.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-BDG39uOT.js";import"./useLink-D1XzLJMC.js";import"./usePopper-CiVsTA5i.js";import"./index-CVY-dQCv.js";import"./Button-u3Szlpwi.js";import"./useButton-CPiAOWt4.js";import"./Portal-DWemPOBz.js";import"./IconExclamationMarkCircle24-D9HRm0iS.js";import"./IconMagnifier-cEbqC_l9.js";import"./IconMagnifier16-CnCc3uxc.js";import"./index-Dj41YxI-.js";import"./Dropdown-npONTJ-4.js";import"./useOverlayTriggerState-oSa33iiK.js";import"./useMenuTrigger-_fk9YqDF.js";import"./useLocalizedStringFormatter-CObK2MU7.js";import"./helper-l_C8poB2.js";import"./keyboard-D1Grv8ba.js";import"./SelectionManager-8vklXOjF.js";import"./MenuItem-DzrMz-st.js";import"./IconCaretRight-By3Y917Z.js";import"./elements-BOYmskOL.js";import"./Trigger-CqvJniOY.js";import"./IconCaretDown-CZSY2FCY.js";import"./IconCaretDown16-D-pNJ8Nh.js";import"./IconTrashBin16-D4_SDr3O.js";import"./IconTrashBin24-shDMvP_R.js";import"./EnablePortalWrapper-AD12x3kU.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
