import{r as n,j as y}from"./iframe-BJib8Kll.js";import{C as f}from"./colors-cqDZVL9s.js";import{C as F,E as g}from"./example-palettes-C6eNorjm.js";import"./preload-helper-C1FmrZbK.js";import"./SegmentedControls-BMKjONUm.js";import"./useFocusRing-Dx5cesQf.js";import"./useEffectEvent-Dk3j2lU0.js";import"./useFocusable-BZ2M2-hT.js";import"./chain-6ySw-mAZ.js";import"./index-BrcoO-my.js";import"./useFormValidationState-DxbTg9AE.js";import"./FocusScope-DPKSdeNr.js";import"./useField-DLPpDkSW.js";import"./useLabels-BaNefV9V.js";import"./context-BBnUWvPs.js";import"./VisuallyHidden-D3YgVbdh.js";import"./useControlledState-C4LQU8kd.js";import"./useMemoizedId-BmAS-enA.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./proxy-BMV8e8QC.js";import"./TextInput-B-ufwcW8.js";import"./LoadingCircle-uDZgv9aU.js";import"./IconCheckMark-Cnljcyn_.js";import"./IconSize-BcCrF_mi.js";import"./IconCross-BduquNop.js";import"./IconExclamationMarkTriangle-Cmjf0-06.js";import"./IconExclamationMarkTriangle24-C5nxH8VW.js";import"./validation-C9S5KgfE.js";import"./LegacyTooltip-DQtshncE.js";import"./useLink-DaZJF4JL.js";import"./usePopper-Bqaw92iD.js";import"./index-8-HEQlSN.js";import"./Button-1lSncydy.js";import"./useButton-nrvqgNmX.js";import"./Portal-DopE8pYV.js";import"./IconExclamationMarkCircle24-DctE9zvr.js";import"./IconMagnifier-BLmmQ3_b.js";import"./IconMagnifier16-BDwmBSV2.js";import"./index-BOYW7Pr0.js";import"./Dropdown-Bhy0kMT-.js";import"./useOverlayTriggerState-BM--gvpO.js";import"./useMenuTrigger-BKrSh_t8.js";import"./useLocalizedStringFormatter-CPgYySyR.js";import"./helper-D36VDYy8.js";import"./keyboard-BHXUu4oR.js";import"./SelectionManager-DjgpX1-S.js";import"./MenuItem-Bw0BA9Oa.js";import"./IconCaretRight-Ed1OxVks.js";import"./elements-BOYmskOL.js";import"./Trigger-BjHlmN8o.js";import"./IconCaretDown-DragTtrg.js";import"./IconCaretDown16-CKZGjeXl.js";import"./IconTrashBin16-C7Mvs-24.js";import"./IconTrashBin24-DSKkA_eN.js";import"./EnablePortalWrapper-DA7RYv-Z.js";const _r={title:"Components/Color Picker",component:F,tags:["autodocs"],args:{currentColor:{red:85,green:102,blue:255}},argTypes:{onSelect:{action:"Select Color"}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Color Picker component](/docs/current_components-colorpicker--documentation) instead."}}}},s=e=>{const[x,P]=n.useState(e.currentColor),[k,E]=n.useState(f.Hex);return y.jsx(F,{...e,currentColor:x,currentFormat:k,setFormat:E,onSelect:m=>{e.onSelect(m),P(m)}})},t=s.bind({}),r=s.bind({});r.args={palettes:g,allowCustomColor:!1};const o=s.bind({});o.args={palettes:g};var c,a,l;t.parameters={...t.parameters,docs:{...(c=t.parameters)==null?void 0:c.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(l=(a=t.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};var p,i,u;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(u=(i=r.parameters)==null?void 0:i.docs)==null?void 0:u.source}}};var C,d,S;o.parameters={...o.parameters,docs:{...(C=o.parameters)==null?void 0:C.docs,source:{originalSource:`args => {
  const [selectedColor, setSelectedColor] = useState(args.currentColor);
  const [currentFormat, setCurrentFormat] = useState(ColorFormat.Hex);
  return <ColorPicker {...args} currentColor={selectedColor} currentFormat={currentFormat} setFormat={setCurrentFormat} onSelect={color => {
    args.onSelect(color);
    setSelectedColor(color);
  }} />;
}`,...(S=(d=o.parameters)==null?void 0:d.docs)==null?void 0:S.source}}};const br=["OnlyCustomColor","OnlyBrandColor","WithBrandColors"];export{r as OnlyBrandColor,t as OnlyCustomColor,o as WithBrandColors,br as __namedExportsOrder,_r as default};
