import{j as t}from"./iframe-loALxrwA.js";import{T as r}from"./TooltipIcon-CMqqw_pw.js";import{I as d}from"./LegacyTooltip-Cor5DXUh.js";import{I as u}from"./IconInfo-ZWyQd0J3.js";import{I as g}from"./IconQuestionMarkCircle-Car0cXyI.js";import{I as m}from"./InputLabel-CtseXcks.js";import"./preload-helper-C1FmrZbK.js";import"./IconSize-BcCrF_mi.js";import"./focusStyle-Ch_WJ4aJ.js";import"./merge-DI-veSMP.js";import"./useLink-C5uGPnj2.js";import"./useFocusable-gZZJckaE.js";import"./useFocusRing-KMhl1UJS.js";import"./useEffectEvent-4xwT3IDe.js";import"./chain-DPfOkws3.js";import"./index-Dxja0Wkm.js";import"./usePopper-c8iwtMtM.js";import"./index-D5EgzJqU.js";import"./Button-xxPrQzX3.js";import"./useButton-CIYJdvKD.js";import"./Portal-BOzxa9wa.js";import"./useMemoizedId-Dz0xJZ2i.js";import"./IconCheckMark-B_q4DDrQ.js";import"./IconExclamationMarkCircle24-EhlvbpVM.js";import"./IconExclamationMarkTriangle-B8PE083H.js";import"./IconExclamationMarkTriangle24-qoBG5I0z.js";const $={title:"Components/Input Label",component:m,tags:["autodocs"],args:{children:"Input Label",disabled:!1,required:!1,tooltip:{content:"Lorem ipsum dolor sit amet."}},parameters:{status:{type:"deprecated"},docs:{description:{component:"### This component is deprecated, please use the [new Label component](/docs/current_components-label--documentation) instead."}}}},e=c=>t.jsx(m,{...c}),o=e.bind({});o.args={...e.args,tooltip:[{triggerIcon:t.jsx(u,{}),triggerStyle:r.Danger,content:"Tooltip 1"},{triggerIcon:t.jsx(g,{}),triggerStyle:r.Primary,content:"Tooltip 2"},{triggerIcon:t.jsx(d,{filled:!0}),triggerStyle:r.Warning,content:"Tooltip 3"}]};e.__docgenInfo={description:"",methods:[],displayName:"InputLabel",props:{id:{required:!1,tsType:{name:"string"},description:""},htmlFor:{required:!0,tsType:{name:"string"},description:""},required:{required:!1,tsType:{name:"boolean"},description:""},disabled:{required:!1,tsType:{name:"boolean"},description:""},clickable:{required:!1,tsType:{name:"boolean"},description:""},tooltip:{required:!1,tsType:{name:"union",raw:`| (LegacyTooltipProps & Pick<TooltipIconProps, 'triggerStyle' | 'triggerIcon'>)
| (LegacyTooltipProps & Pick<TooltipIconProps, 'triggerStyle' | 'triggerIcon'>)[]`,elements:[{name:"unknown"},{name:"Array",elements:[{name:"unknown"}],raw:"(LegacyTooltipProps & Pick<TooltipIconProps, 'triggerStyle' | 'triggerIcon'>)[]"}]},description:""},bold:{required:!1,tsType:{name:"boolean"},description:""},children:{required:!1,tsType:{name:"ReactNode"},description:""},"data-test-id":{required:!1,tsType:{name:"string"},description:""}}};var i,n,s;e.parameters={...e.parameters,docs:{...(i=e.parameters)==null?void 0:i.docs,source:{originalSource:"(args: InputLabelProps) => <InputLabelComponent {...args} />",...(s=(n=e.parameters)==null?void 0:n.docs)==null?void 0:s.source}}};var p,a,l;o.parameters={...o.parameters,docs:{...(p=o.parameters)==null?void 0:p.docs,source:{originalSource:"(args: InputLabelProps) => <InputLabelComponent {...args} />",...(l=(a=o.parameters)==null?void 0:a.docs)==null?void 0:l.source}}};const v=["InputLabel","InputLabelWithMultipleTooltips"];export{e as InputLabel,o as InputLabelWithMultipleTooltips,v as __namedExportsOrder,$ as default};
