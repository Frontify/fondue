/* (c) Copyright Frontify Ltd., all rights reserved. */

@use '../../../utilities/focusStyle.module.scss';

.root {
    --gap: 0.375rem; // 6px according to Figma

    font-size: var(--typography-font-size-small);
    line-height: var(--typography-line-height-tight);
    border-radius: var(--border-radius-medium);
    position: relative;
    display: inline-flex;
    transition: background-color 250ms, color 250ms;
    align-items: stretch;
    white-space: nowrap;
    min-height: 1rem;
    overflow: hidden;

    &[data-size="small"] {
        .mainContent {
            padding: 2px var(--spacing-x-small);
        }
    }

    &[data-disabled="true"] {
        background-color: var(--color-container-disabled-default);
        color: var(--color-container-disabled-on-disabled);
        cursor: default;

        &:hover {
            background-color: var(--color-container-disabled-default);
            color: var(--color-container-disabled-on-disabled);
        }

        .mainContent:is(button),
        .actionButton {
            cursor: default;
            opacity: 0.5;

            &:hover {
                background-color: transparent;
            }
        }
    }

    .mainContent {
        padding: var(--spacing-xx-small) var(--spacing-x-small);
        gap: var(--gap);
        display: flex;
        align-items: center;
        flex: 1;
        cursor: default;
        border: none;
        background: transparent;
        color: inherit;
        font: inherit;

        &:has(~.actionButton) {
            margin-right: -0.3rem;
        }

        &:is(button) {
            cursor: pointer;

            & {
                @include focusStyle.focus-outline;
            }
        }
    }

    .actionButton {
        padding: 0;
        margin: 0;
        height: 100%;
        min-height: inherit;
        width: 1.5rem;
        border: none 0 transparent;
        background: transparent;
        color: inherit;
        border-radius: 0;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 250ms, color 250ms;
        flex-shrink: 0;
        aspect-ratio: 1;

        & {
            @include focusStyle.focus-outline;
        }

        &:hover {
            background-color: rgba(0, 0, 0, 0.1);
        }
    }

    [data-hover] {
        display: grid;
        grid-template-areas: "stack";

        >div {
            grid-area: stack;
            display: flex;
            align-items: center;
            gap: var(--gap);
            width: 100%;
        }

        >div:first-child {
            opacity: 0;
        }

        >div:last-child {
            opacity: 1;
        }
    }

    [data-hover="true"] {
        >div:first-child {
            opacity: 1;
        }

        >div:last-child {
            opacity: 0;
        }
    }

}

@mixin variant($name, $color) {
    .root[data-variant=#{$name}]:not([data-disabled="true"]) {
        background-color: var(--box-#{$color}-strong-color);
        color: var(--box-#{$color}-strong-inverse-color);

        .secondaryContent {
            color: var(--box-#{$color}-strong-inverse-color);
        }

        .mainContent:is(button) {
            &:hover {
                background-color: var(--box-#{$color}-strong-color-hover);
                color: var(--box-#{$color}-strong-inverse-color-hover);
            }
        }

        .actionButton {
            &:hover {
                background-color: var(--box-#{$color}-strong-color-hover);
                color: var(--box-#{$color}-strong-inverse-color-hover);
            }
        }

        &[data-emphasis="weak"] {
            background-color: var(--box-#{$color}-color);
            color: var(--box-#{$color}-inverse-color);

            .secondaryContent {
                color: var(--color-secondary-default);
            }

            .mainContent:is(button) {
                &:hover {
                    background-color: var(--box-#{$color}-color-hover);
                    color: var(--box-#{$color}-inverse-color-hover);
                }
            }

            .actionButton {
                &:hover {
                    background-color: var(--box-#{$color}-color-hover);
                    color: var(--box-#{$color}-inverse-color-hover);
                }
            }
        }
    }
}

@include variant(default, neutral);
@include variant(positive, positive);
@include variant(highlight, selected);
@include variant(warning, warning);
@include variant(negative, negative);
