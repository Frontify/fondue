/* (c) Copyright Frontify Ltd., all rights reserved. */

@use '../../../utilities/sizeToken.module.scss';
@use '../../../utilities/focusStyle.module.scss';
@use '../../../utilities/transitions.module.scss';

.root {
    position: relative;
    display: flex;
    align-items: stretch;

    font-family: var(--typography-font-family-primary);
    font-weight: 400;
    font-size: var(--typography-font-size-medium);

    line-height: var(--typography-line-height-medium);
    text-align: start;
    height: sizeToken.get(9);
    box-sizing: border-box;

    color: var(--color-primary-default);
    background-color: var(--color-surface-default);
    border-radius: var(--border-radius-medium);
    border: var(--border-width-default) solid var(--color-line-mid);

    & {
        @include focusStyle.focus-outline;
        @include transitions.transition-colors;
    }

    &:hover {
        border-color: var(--color-line-strong);
    }

    &:has([data-show-focus-ring='false']:focus) {
        border-color: var(--color-line-strong);
    }

    &:has(input[readonly]) {
        border-color: transparent;
    }

    &:has(input:disabled) {
        border-color: var(--color-line-subtle);
        background-color: var(--color-container-disabled-default);
    }

    &[data-status='success'] {
        border-color: var(--color-success-default);
    }

    &[data-status='error'] {
        border-color: var(--color-error-default);
    }
}

.input {
    width: 100%;
    background-color: transparent;
    display: flex;
    align-items: center;
    text-align: inherit;
    text-indent: sizeToken.get(3);
    outline: 2px solid transparent;
    outline-offset: 2px;
    border-radius: calc(var(--border-radius-medium) - var(--border-width-default));

    &::placeholder {
        color: var(--color-secondary-default);
    }

    &:-moz-focusring {
        outline: 2px solid transparent;
        outline-offset: 2px;
    }

    // Remove border-radius and text-indent/padding on the left if there’s a left-side slot
    &:has(~ div:not([data-name='right'])) {
        text-indent: 0px;
        border-top-left-radius: 0px;
        border-bottom-left-radius: 0px;
    }

    // Remove border-radius and padding on the right if there’s a right-side slot
    &:has(~ .slot[data-side='right'], ~ .slot:not([data-side='right']) ~ .slot:not([data-side='left'])) {
        padding-right: 0;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    // Readonly styles
    &[readonly] {
        cursor: text;
        color: var(--color-secondary-default);
        text-indent: 0px;
    }
    &[readonly] ~ .slot {
        color: var(--color-secondary-default);
    }
    &[readonly] ~ .slot:not([data-name='right']) {
        padding-left: 0px;
    }

    &:disabled {
        cursor: text;
        color: var(--color-disabled-default);
    }
    &:disabled ~ .slot {
        color: var(--color-disabled-default);
    }
}

.slot {
    display: flex;
    flex-shrink: 0;
    align-items: center;
    cursor: text;
    gap: sizeToken.get(1.5);
    padding-left: sizeToken.get(3);
    padding-right: sizeToken.get(1.5);

    // Left slot
    &:not([data-name='right']) {
        order: -1;
        margin-left: 0px;
        margin-right: 0px;
    }

    // Right slot
    &[data-name='right'] {
        order: 0;
        margin-left: 0px;
        margin-right: 0px;
        padding-right: sizeToken.get(3);
    }

    // 2 slots without any name should be implicitly ordered
    &:not([data-name='right']) ~ :not([data-name='left']) {
        order: 0;
        margin-left: 0px;
        margin-right: 0px;
    }
}

.iconSuccess {
    display: flex;
    align-items: center;
    height: 100%;
    margin-left: sizeToken.get(3);
    margin-right: sizeToken.get(3);
    color: var(--color-success-default);
}

.iconError {
    display: flex;
    align-items: center;
    height: 100%;
    margin-left: sizeToken.get(3);
    margin-right: sizeToken.get(3);
    color: var(--color-error-default);
}

// Icon with a right slot shouldn't have a margin right
.iconSuccess:has(~ .slot[data-name='right']),
.iconError:has(~ .slot[data-name='right']) {
    margin-right: 0px;
}

.loadingStatus {
    display: flex;
    position: absolute;
    width: sizeToken.get(6);
    height: sizeToken.get(6);
    top: sizeToken.get(-3);
    right: sizeToken.get(-3);
    pointer-events: none;
    align-items: center;
    justify-content: center;
    background-color: var(--color-surface-default);
    border: var(--border-width-default) solid var(--color-line-strong);
    border-radius: 9999px;

    &::before {
        content: '';
        display: flex;
        align-items: center;
        justify-content: center;
        width: sizeToken.get(4);
        height: sizeToken.get(4);
        border: var(--border-width-default) solid var(--color-interactive-default);
        border-top-color: transparent;
        border-radius: 9999px;
        animation: spin 1s linear infinite;
    }
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

.tw-dark .root {
    background-color: transparent;
}
