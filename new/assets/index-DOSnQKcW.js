import{r as i,R as S}from"./iframe-BWb6krwC.js";import{u as b}from"./index-CH58e1AR.js";var h=S[" useInsertionEffect ".trim().toString()]||b;function g({prop:t,defaultProp:c,onChange:e=()=>{},caller:u}){const[s,o,r]=z({defaultProp:c,onChange:e}),n=t!==void 0,l=n?t:s;{const f=i.useRef(t!==void 0);i.useEffect(()=>{const d=f.current;d!==n&&console.warn(`${u} is changing from ${d?"controlled":"uncontrolled"} to ${n?"controlled":"uncontrolled"}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`),f.current=n},[n,u])}const a=i.useCallback(f=>{var d;if(n){const v=y(f)?f(t):f;v!==t&&((d=r.current)==null||d.call(r,v))}else o(f)},[n,t,o,r]);return[l,a]}function z({defaultProp:t,onChange:c}){const[e,u]=i.useState(t),s=i.useRef(e),o=i.useRef(c);return h(()=>{o.current=c},[c]),i.useEffect(()=>{var r;s.current!==e&&((r=o.current)==null||r.call(o,e),s.current=e)},[e,s]),[e,u,o]}function y(t){return typeof t=="function"}function m(t){const[c,e]=i.useState(void 0);return b(()=>{if(t){e({width:t.offsetWidth,height:t.offsetHeight});const u=new ResizeObserver(s=>{if(!Array.isArray(s)||!s.length)return;const o=s[0];let r,n;if("borderBoxSize"in o){const l=o.borderBoxSize,a=Array.isArray(l)?l[0]:l;r=a.inlineSize,n=a.blockSize}else r=t.offsetWidth,n=t.offsetHeight;e({width:r,height:n})});return u.observe(t,{box:"border-box"}),()=>u.unobserve(t)}else e(void 0)},[t]),c}export{m as a,g as u};
